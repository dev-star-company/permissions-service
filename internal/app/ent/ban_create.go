// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/ban"
	"permission-service/internal/app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BanCreate is the builder for creating a Ban entity.
type BanCreate struct {
	config
	mutation *BanMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BanCreate) SetCreatedAt(t time.Time) *BanCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BanCreate) SetNillableCreatedAt(t *time.Time) *BanCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BanCreate) SetUpdatedAt(t time.Time) *BanCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BanCreate) SetNillableUpdatedAt(t *time.Time) *BanCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BanCreate) SetDeletedAt(t time.Time) *BanCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BanCreate) SetNillableDeletedAt(t *time.Time) *BanCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetCreatedBy sets the "created_by" field.
func (bc *BanCreate) SetCreatedBy(i int) *BanCreate {
	bc.mutation.SetCreatedBy(i)
	return bc
}

// SetUpdatedBy sets the "updated_by" field.
func (bc *BanCreate) SetUpdatedBy(i int) *BanCreate {
	bc.mutation.SetUpdatedBy(i)
	return bc
}

// SetDeletedBy sets the "deleted_by" field.
func (bc *BanCreate) SetDeletedBy(i int) *BanCreate {
	bc.mutation.SetDeletedBy(i)
	return bc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (bc *BanCreate) SetNillableDeletedBy(i *int) *BanCreate {
	if i != nil {
		bc.SetDeletedBy(*i)
	}
	return bc
}

// SetUserID sets the "user_id" field.
func (bc *BanCreate) SetUserID(i int) *BanCreate {
	bc.mutation.SetUserID(i)
	return bc
}

// SetExpiresAt sets the "expires_at" field.
func (bc *BanCreate) SetExpiresAt(t time.Time) *BanCreate {
	bc.mutation.SetExpiresAt(t)
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BanCreate) SetUser(u *User) *BanCreate {
	return bc.SetUserID(u.ID)
}

// Mutation returns the BanMutation object of the builder.
func (bc *BanCreate) Mutation() *BanMutation {
	return bc.mutation
}

// Save creates the Ban in the database.
func (bc *BanCreate) Save(ctx context.Context) (*Ban, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BanCreate) SaveX(ctx context.Context) *Ban {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BanCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BanCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BanCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := ban.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := ban.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BanCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ban.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Ban.updated_at"`)}
	}
	if _, ok := bc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Ban.created_by"`)}
	}
	if v, ok := bc.mutation.CreatedBy(); ok {
		if err := ban.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Ban.created_by": %w`, err)}
		}
	}
	if _, ok := bc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Ban.updated_by"`)}
	}
	if v, ok := bc.mutation.UpdatedBy(); ok {
		if err := ban.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Ban.updated_by": %w`, err)}
		}
	}
	if _, ok := bc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Ban.user_id"`)}
	}
	if _, ok := bc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Ban.expires_at"`)}
	}
	if len(bc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Ban.user"`)}
	}
	return nil
}

func (bc *BanCreate) sqlSave(ctx context.Context) (*Ban, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BanCreate) createSpec() (*Ban, *sqlgraph.CreateSpec) {
	var (
		_node = &Ban{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(ban.Table, sqlgraph.NewFieldSpec(ban.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(ban.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(ban.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(ban.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bc.mutation.CreatedBy(); ok {
		_spec.SetField(ban.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := bc.mutation.UpdatedBy(); ok {
		_spec.SetField(ban.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := bc.mutation.DeletedBy(); ok {
		_spec.SetField(ban.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if value, ok := bc.mutation.ExpiresAt(); ok {
		_spec.SetField(ban.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ban.UserTable,
			Columns: []string{ban.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BanCreateBulk is the builder for creating many Ban entities in bulk.
type BanCreateBulk struct {
	config
	err      error
	builders []*BanCreate
}

// Save creates the Ban entities in the database.
func (bcb *BanCreateBulk) Save(ctx context.Context) ([]*Ban, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Ban, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BanCreateBulk) SaveX(ctx context.Context) []*Ban {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BanCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BanCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
