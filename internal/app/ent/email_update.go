// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/email"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmailUpdate is the builder for updating Email entities.
type EmailUpdate struct {
	config
	hooks    []Hook
	mutation *EmailMutation
}

// Where appends a list predicates to the EmailUpdate builder.
func (eu *EmailUpdate) Where(ps ...predicate.Email) *EmailUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmailUpdate) SetUpdatedAt(t time.Time) *EmailUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EmailUpdate) SetDeletedAt(t time.Time) *EmailUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableDeletedAt(t *time.Time) *EmailUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EmailUpdate) ClearDeletedAt() *EmailUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EmailUpdate) SetUpdatedBy(i int) *EmailUpdate {
	eu.mutation.ResetUpdatedBy()
	eu.mutation.SetUpdatedBy(i)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableUpdatedBy(i *int) *EmailUpdate {
	if i != nil {
		eu.SetUpdatedBy(*i)
	}
	return eu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (eu *EmailUpdate) AddUpdatedBy(i int) *EmailUpdate {
	eu.mutation.AddUpdatedBy(i)
	return eu
}

// SetDeletedBy sets the "deleted_by" field.
func (eu *EmailUpdate) SetDeletedBy(i int) *EmailUpdate {
	eu.mutation.ResetDeletedBy()
	eu.mutation.SetDeletedBy(i)
	return eu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableDeletedBy(i *int) *EmailUpdate {
	if i != nil {
		eu.SetDeletedBy(*i)
	}
	return eu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (eu *EmailUpdate) AddDeletedBy(i int) *EmailUpdate {
	eu.mutation.AddDeletedBy(i)
	return eu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (eu *EmailUpdate) ClearDeletedBy() *EmailUpdate {
	eu.mutation.ClearDeletedBy()
	return eu
}

// SetEmail sets the "email" field.
func (eu *EmailUpdate) SetEmail(s string) *EmailUpdate {
	eu.mutation.SetEmail(s)
	return eu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableEmail(s *string) *EmailUpdate {
	if s != nil {
		eu.SetEmail(*s)
	}
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *EmailUpdate) SetUserID(i int) *EmailUpdate {
	eu.mutation.SetUserID(i)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableUserID(i *int) *EmailUpdate {
	if i != nil {
		eu.SetUserID(*i)
	}
	return eu
}

// SetMain sets the "main" field.
func (eu *EmailUpdate) SetMain(b bool) *EmailUpdate {
	eu.mutation.SetMain(b)
	return eu
}

// SetNillableMain sets the "main" field if the given value is not nil.
func (eu *EmailUpdate) SetNillableMain(b *bool) *EmailUpdate {
	if b != nil {
		eu.SetMain(*b)
	}
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *EmailUpdate) SetUser(u *User) *EmailUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the EmailMutation object of the builder.
func (eu *EmailUpdate) Mutation() *EmailMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EmailUpdate) ClearUser() *EmailUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmailUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmailUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmailUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmailUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmailUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if email.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized email.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := email.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmailUpdate) check() error {
	if v, ok := eu.mutation.UpdatedBy(); ok {
		if err := email.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Email.updated_by": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Email(); ok {
		if err := email.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Email.email": %w`, err)}
		}
	}
	if eu.mutation.UserCleared() && len(eu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Email.user"`)
	}
	return nil
}

func (eu *EmailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(email.Table, email.Columns, sqlgraph.NewFieldSpec(email.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(email.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(email.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.SetField(email.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(email.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := eu.mutation.DeletedBy(); ok {
		_spec.SetField(email.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(email.FieldDeletedBy, field.TypeInt, value)
	}
	if eu.mutation.DeletedByCleared() {
		_spec.ClearField(email.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := eu.mutation.Email(); ok {
		_spec.SetField(email.FieldEmail, field.TypeString, value)
	}
	if value, ok := eu.mutation.Main(); ok {
		_spec.SetField(email.FieldMain, field.TypeBool, value)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.UserTable,
			Columns: []string{email.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.UserTable,
			Columns: []string{email.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmailUpdateOne is the builder for updating a single Email entity.
type EmailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmailUpdateOne) SetUpdatedAt(t time.Time) *EmailUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EmailUpdateOne) SetDeletedAt(t time.Time) *EmailUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableDeletedAt(t *time.Time) *EmailUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EmailUpdateOne) ClearDeletedAt() *EmailUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EmailUpdateOne) SetUpdatedBy(i int) *EmailUpdateOne {
	euo.mutation.ResetUpdatedBy()
	euo.mutation.SetUpdatedBy(i)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableUpdatedBy(i *int) *EmailUpdateOne {
	if i != nil {
		euo.SetUpdatedBy(*i)
	}
	return euo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (euo *EmailUpdateOne) AddUpdatedBy(i int) *EmailUpdateOne {
	euo.mutation.AddUpdatedBy(i)
	return euo
}

// SetDeletedBy sets the "deleted_by" field.
func (euo *EmailUpdateOne) SetDeletedBy(i int) *EmailUpdateOne {
	euo.mutation.ResetDeletedBy()
	euo.mutation.SetDeletedBy(i)
	return euo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableDeletedBy(i *int) *EmailUpdateOne {
	if i != nil {
		euo.SetDeletedBy(*i)
	}
	return euo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (euo *EmailUpdateOne) AddDeletedBy(i int) *EmailUpdateOne {
	euo.mutation.AddDeletedBy(i)
	return euo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (euo *EmailUpdateOne) ClearDeletedBy() *EmailUpdateOne {
	euo.mutation.ClearDeletedBy()
	return euo
}

// SetEmail sets the "email" field.
func (euo *EmailUpdateOne) SetEmail(s string) *EmailUpdateOne {
	euo.mutation.SetEmail(s)
	return euo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableEmail(s *string) *EmailUpdateOne {
	if s != nil {
		euo.SetEmail(*s)
	}
	return euo
}

// SetUserID sets the "user_id" field.
func (euo *EmailUpdateOne) SetUserID(i int) *EmailUpdateOne {
	euo.mutation.SetUserID(i)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableUserID(i *int) *EmailUpdateOne {
	if i != nil {
		euo.SetUserID(*i)
	}
	return euo
}

// SetMain sets the "main" field.
func (euo *EmailUpdateOne) SetMain(b bool) *EmailUpdateOne {
	euo.mutation.SetMain(b)
	return euo
}

// SetNillableMain sets the "main" field if the given value is not nil.
func (euo *EmailUpdateOne) SetNillableMain(b *bool) *EmailUpdateOne {
	if b != nil {
		euo.SetMain(*b)
	}
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *EmailUpdateOne) SetUser(u *User) *EmailUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the EmailMutation object of the builder.
func (euo *EmailUpdateOne) Mutation() *EmailMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EmailUpdateOne) ClearUser() *EmailUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Where appends a list predicates to the EmailUpdate builder.
func (euo *EmailUpdateOne) Where(ps ...predicate.Email) *EmailUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmailUpdateOne) Select(field string, fields ...string) *EmailUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Email entity.
func (euo *EmailUpdateOne) Save(ctx context.Context) (*Email, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmailUpdateOne) SaveX(ctx context.Context) *Email {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmailUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmailUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmailUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if email.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized email.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := email.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmailUpdateOne) check() error {
	if v, ok := euo.mutation.UpdatedBy(); ok {
		if err := email.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Email.updated_by": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Email(); ok {
		if err := email.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Email.email": %w`, err)}
		}
	}
	if euo.mutation.UserCleared() && len(euo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Email.user"`)
	}
	return nil
}

func (euo *EmailUpdateOne) sqlSave(ctx context.Context) (_node *Email, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(email.Table, email.Columns, sqlgraph.NewFieldSpec(email.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Email.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, email.FieldID)
		for _, f := range fields {
			if !email.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != email.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(email.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(email.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(email.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.SetField(email.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(email.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := euo.mutation.DeletedBy(); ok {
		_spec.SetField(email.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(email.FieldDeletedBy, field.TypeInt, value)
	}
	if euo.mutation.DeletedByCleared() {
		_spec.ClearField(email.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := euo.mutation.Email(); ok {
		_spec.SetField(email.FieldEmail, field.TypeString, value)
	}
	if value, ok := euo.mutation.Main(); ok {
		_spec.SetField(email.FieldMain, field.TypeBool, value)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.UserTable,
			Columns: []string{email.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   email.UserTable,
			Columns: []string{email.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Email{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{email.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
