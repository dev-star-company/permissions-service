// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/services"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServicesUpdate is the builder for updating Services entities.
type ServicesUpdate struct {
	config
	hooks    []Hook
	mutation *ServicesMutation
}

// Where appends a list predicates to the ServicesUpdate builder.
func (su *ServicesUpdate) Where(ps ...predicate.Services) *ServicesUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ServicesUpdate) SetUpdatedAt(t time.Time) *ServicesUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *ServicesUpdate) SetDeletedAt(t time.Time) *ServicesUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *ServicesUpdate) SetNillableDeletedAt(t *time.Time) *ServicesUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *ServicesUpdate) ClearDeletedAt() *ServicesUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *ServicesUpdate) SetUpdatedBy(i int) *ServicesUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *ServicesUpdate) SetNillableUpdatedBy(i *int) *ServicesUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *ServicesUpdate) AddUpdatedBy(i int) *ServicesUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// SetDeletedBy sets the "deleted_by" field.
func (su *ServicesUpdate) SetDeletedBy(i int) *ServicesUpdate {
	su.mutation.ResetDeletedBy()
	su.mutation.SetDeletedBy(i)
	return su
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (su *ServicesUpdate) SetNillableDeletedBy(i *int) *ServicesUpdate {
	if i != nil {
		su.SetDeletedBy(*i)
	}
	return su
}

// AddDeletedBy adds i to the "deleted_by" field.
func (su *ServicesUpdate) AddDeletedBy(i int) *ServicesUpdate {
	su.mutation.AddDeletedBy(i)
	return su
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (su *ServicesUpdate) ClearDeletedBy() *ServicesUpdate {
	su.mutation.ClearDeletedBy()
	return su
}

// SetName sets the "name" field.
func (su *ServicesUpdate) SetName(s string) *ServicesUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ServicesUpdate) SetNillableName(s *string) *ServicesUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// AddPermissionIDs adds the "permission" edge to the Permission entity by IDs.
func (su *ServicesUpdate) AddPermissionIDs(ids ...int) *ServicesUpdate {
	su.mutation.AddPermissionIDs(ids...)
	return su
}

// AddPermission adds the "permission" edges to the Permission entity.
func (su *ServicesUpdate) AddPermission(p ...*Permission) *ServicesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPermissionIDs(ids...)
}

// Mutation returns the ServicesMutation object of the builder.
func (su *ServicesUpdate) Mutation() *ServicesMutation {
	return su.mutation
}

// ClearPermission clears all "permission" edges to the Permission entity.
func (su *ServicesUpdate) ClearPermission() *ServicesUpdate {
	su.mutation.ClearPermission()
	return su
}

// RemovePermissionIDs removes the "permission" edge to Permission entities by IDs.
func (su *ServicesUpdate) RemovePermissionIDs(ids ...int) *ServicesUpdate {
	su.mutation.RemovePermissionIDs(ids...)
	return su
}

// RemovePermission removes "permission" edges to Permission entities.
func (su *ServicesUpdate) RemovePermission(p ...*Permission) *ServicesUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServicesUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServicesUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServicesUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServicesUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ServicesUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := services.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServicesUpdate) check() error {
	if v, ok := su.mutation.UpdatedBy(); ok {
		if err := services.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Services.updated_by": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := services.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Services.name": %w`, err)}
		}
	}
	return nil
}

func (su *ServicesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(services.Table, services.Columns, sqlgraph.NewFieldSpec(services.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(services.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(services.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(services.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(services.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(services.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := su.mutation.DeletedBy(); ok {
		_spec.SetField(services.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedDeletedBy(); ok {
		_spec.AddField(services.FieldDeletedBy, field.TypeInt, value)
	}
	if su.mutation.DeletedByCleared() {
		_spec.ClearField(services.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(services.FieldName, field.TypeString, value)
	}
	if su.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   services.PermissionTable,
			Columns: []string{services.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPermissionIDs(); len(nodes) > 0 && !su.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   services.PermissionTable,
			Columns: []string{services.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   services.PermissionTable,
			Columns: []string{services.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{services.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServicesUpdateOne is the builder for updating a single Services entity.
type ServicesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServicesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ServicesUpdateOne) SetUpdatedAt(t time.Time) *ServicesUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *ServicesUpdateOne) SetDeletedAt(t time.Time) *ServicesUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *ServicesUpdateOne) SetNillableDeletedAt(t *time.Time) *ServicesUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *ServicesUpdateOne) ClearDeletedAt() *ServicesUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *ServicesUpdateOne) SetUpdatedBy(i int) *ServicesUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *ServicesUpdateOne) SetNillableUpdatedBy(i *int) *ServicesUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *ServicesUpdateOne) AddUpdatedBy(i int) *ServicesUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// SetDeletedBy sets the "deleted_by" field.
func (suo *ServicesUpdateOne) SetDeletedBy(i int) *ServicesUpdateOne {
	suo.mutation.ResetDeletedBy()
	suo.mutation.SetDeletedBy(i)
	return suo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (suo *ServicesUpdateOne) SetNillableDeletedBy(i *int) *ServicesUpdateOne {
	if i != nil {
		suo.SetDeletedBy(*i)
	}
	return suo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (suo *ServicesUpdateOne) AddDeletedBy(i int) *ServicesUpdateOne {
	suo.mutation.AddDeletedBy(i)
	return suo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (suo *ServicesUpdateOne) ClearDeletedBy() *ServicesUpdateOne {
	suo.mutation.ClearDeletedBy()
	return suo
}

// SetName sets the "name" field.
func (suo *ServicesUpdateOne) SetName(s string) *ServicesUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ServicesUpdateOne) SetNillableName(s *string) *ServicesUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// AddPermissionIDs adds the "permission" edge to the Permission entity by IDs.
func (suo *ServicesUpdateOne) AddPermissionIDs(ids ...int) *ServicesUpdateOne {
	suo.mutation.AddPermissionIDs(ids...)
	return suo
}

// AddPermission adds the "permission" edges to the Permission entity.
func (suo *ServicesUpdateOne) AddPermission(p ...*Permission) *ServicesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPermissionIDs(ids...)
}

// Mutation returns the ServicesMutation object of the builder.
func (suo *ServicesUpdateOne) Mutation() *ServicesMutation {
	return suo.mutation
}

// ClearPermission clears all "permission" edges to the Permission entity.
func (suo *ServicesUpdateOne) ClearPermission() *ServicesUpdateOne {
	suo.mutation.ClearPermission()
	return suo
}

// RemovePermissionIDs removes the "permission" edge to Permission entities by IDs.
func (suo *ServicesUpdateOne) RemovePermissionIDs(ids ...int) *ServicesUpdateOne {
	suo.mutation.RemovePermissionIDs(ids...)
	return suo
}

// RemovePermission removes "permission" edges to Permission entities.
func (suo *ServicesUpdateOne) RemovePermission(p ...*Permission) *ServicesUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePermissionIDs(ids...)
}

// Where appends a list predicates to the ServicesUpdate builder.
func (suo *ServicesUpdateOne) Where(ps ...predicate.Services) *ServicesUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServicesUpdateOne) Select(field string, fields ...string) *ServicesUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Services entity.
func (suo *ServicesUpdateOne) Save(ctx context.Context) (*Services, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServicesUpdateOne) SaveX(ctx context.Context) *Services {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServicesUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServicesUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ServicesUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := services.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServicesUpdateOne) check() error {
	if v, ok := suo.mutation.UpdatedBy(); ok {
		if err := services.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Services.updated_by": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := services.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Services.name": %w`, err)}
		}
	}
	return nil
}

func (suo *ServicesUpdateOne) sqlSave(ctx context.Context) (_node *Services, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(services.Table, services.Columns, sqlgraph.NewFieldSpec(services.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Services.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, services.FieldID)
		for _, f := range fields {
			if !services.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != services.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(services.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(services.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(services.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(services.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(services.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := suo.mutation.DeletedBy(); ok {
		_spec.SetField(services.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(services.FieldDeletedBy, field.TypeInt, value)
	}
	if suo.mutation.DeletedByCleared() {
		_spec.ClearField(services.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(services.FieldName, field.TypeString, value)
	}
	if suo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   services.PermissionTable,
			Columns: []string{services.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPermissionIDs(); len(nodes) > 0 && !suo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   services.PermissionTable,
			Columns: []string{services.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   services.PermissionTable,
			Columns: []string{services.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Services{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{services.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
