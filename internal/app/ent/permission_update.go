// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/rolehaspermissions"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PermissionUpdate is the builder for updating Permission entities.
type PermissionUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionMutation
}

// Where appends a list predicates to the PermissionUpdate builder.
func (pu *PermissionUpdate) Where(ps ...predicate.Permission) *PermissionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PermissionUpdate) SetUpdatedAt(t time.Time) *PermissionUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PermissionUpdate) SetDeletedAt(t time.Time) *PermissionUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDeletedAt(t *time.Time) *PermissionUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PermissionUpdate) ClearDeletedAt() *PermissionUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PermissionUpdate) SetUpdatedBy(i int) *PermissionUpdate {
	pu.mutation.ResetUpdatedBy()
	pu.mutation.SetUpdatedBy(i)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableUpdatedBy(i *int) *PermissionUpdate {
	if i != nil {
		pu.SetUpdatedBy(*i)
	}
	return pu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pu *PermissionUpdate) AddUpdatedBy(i int) *PermissionUpdate {
	pu.mutation.AddUpdatedBy(i)
	return pu
}

// SetDeletedBy sets the "deleted_by" field.
func (pu *PermissionUpdate) SetDeletedBy(i int) *PermissionUpdate {
	pu.mutation.ResetDeletedBy()
	pu.mutation.SetDeletedBy(i)
	return pu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDeletedBy(i *int) *PermissionUpdate {
	if i != nil {
		pu.SetDeletedBy(*i)
	}
	return pu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (pu *PermissionUpdate) AddDeletedBy(i int) *PermissionUpdate {
	pu.mutation.AddDeletedBy(i)
	return pu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pu *PermissionUpdate) ClearDeletedBy() *PermissionUpdate {
	pu.mutation.ClearDeletedBy()
	return pu
}

// SetServiceID sets the "service_id" field.
func (pu *PermissionUpdate) SetServiceID(i int) *PermissionUpdate {
	pu.mutation.ResetServiceID()
	pu.mutation.SetServiceID(i)
	return pu
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableServiceID(i *int) *PermissionUpdate {
	if i != nil {
		pu.SetServiceID(*i)
	}
	return pu
}

// AddServiceID adds i to the "service_id" field.
func (pu *PermissionUpdate) AddServiceID(i int) *PermissionUpdate {
	pu.mutation.AddServiceID(i)
	return pu
}

// SetName sets the "name" field.
func (pu *PermissionUpdate) SetName(s string) *PermissionUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableName(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PermissionUpdate) SetDescription(s string) *PermissionUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDescription(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PermissionUpdate) ClearDescription() *PermissionUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetIsActive sets the "is_active" field.
func (pu *PermissionUpdate) SetIsActive(b bool) *PermissionUpdate {
	pu.mutation.SetIsActive(b)
	return pu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableIsActive(b *bool) *PermissionUpdate {
	if b != nil {
		pu.SetIsActive(*b)
	}
	return pu
}

// SetInternalName sets the "internal_name" field.
func (pu *PermissionUpdate) SetInternalName(s string) *PermissionUpdate {
	pu.mutation.SetInternalName(s)
	return pu
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableInternalName(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetInternalName(*s)
	}
	return pu
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (pu *PermissionUpdate) AddRoleIDs(ids ...int) *PermissionUpdate {
	pu.mutation.AddRoleIDs(ids...)
	return pu
}

// AddRoles adds the "roles" edges to the Role entity.
func (pu *PermissionUpdate) AddRoles(r ...*Role) *PermissionUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRoleIDs(ids...)
}

// AddRoleHasPermissionIDs adds the "role_has_permissions" edge to the RoleHasPermissions entity by IDs.
func (pu *PermissionUpdate) AddRoleHasPermissionIDs(ids ...int) *PermissionUpdate {
	pu.mutation.AddRoleHasPermissionIDs(ids...)
	return pu
}

// AddRoleHasPermissions adds the "role_has_permissions" edges to the RoleHasPermissions entity.
func (pu *PermissionUpdate) AddRoleHasPermissions(r ...*RoleHasPermissions) *PermissionUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRoleHasPermissionIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (pu *PermissionUpdate) Mutation() *PermissionMutation {
	return pu.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (pu *PermissionUpdate) ClearRoles() *PermissionUpdate {
	pu.mutation.ClearRoles()
	return pu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (pu *PermissionUpdate) RemoveRoleIDs(ids ...int) *PermissionUpdate {
	pu.mutation.RemoveRoleIDs(ids...)
	return pu
}

// RemoveRoles removes "roles" edges to Role entities.
func (pu *PermissionUpdate) RemoveRoles(r ...*Role) *PermissionUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRoleIDs(ids...)
}

// ClearRoleHasPermissions clears all "role_has_permissions" edges to the RoleHasPermissions entity.
func (pu *PermissionUpdate) ClearRoleHasPermissions() *PermissionUpdate {
	pu.mutation.ClearRoleHasPermissions()
	return pu
}

// RemoveRoleHasPermissionIDs removes the "role_has_permissions" edge to RoleHasPermissions entities by IDs.
func (pu *PermissionUpdate) RemoveRoleHasPermissionIDs(ids ...int) *PermissionUpdate {
	pu.mutation.RemoveRoleHasPermissionIDs(ids...)
	return pu
}

// RemoveRoleHasPermissions removes "role_has_permissions" edges to RoleHasPermissions entities.
func (pu *PermissionUpdate) RemoveRoleHasPermissions(r ...*RoleHasPermissions) *PermissionUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRoleHasPermissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermissionUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PermissionUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if permission.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized permission.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := permission.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PermissionUpdate) check() error {
	if v, ok := pu.mutation.UpdatedBy(); ok {
		if err := permission.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Permission.updated_by": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := permission.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Permission.description": %w`, err)}
		}
	}
	if v, ok := pu.mutation.InternalName(); ok {
		if err := permission.InternalNameValidator(v); err != nil {
			return &ValidationError{Name: "internal_name", err: fmt.Errorf(`ent: validator failed for field "Permission.internal_name": %w`, err)}
		}
	}
	return nil
}

func (pu *PermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(permission.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(permission.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(permission.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(permission.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.DeletedBy(); ok {
		_spec.SetField(permission.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(permission.FieldDeletedBy, field.TypeInt, value)
	}
	if pu.mutation.DeletedByCleared() {
		_spec.ClearField(permission.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := pu.mutation.ServiceID(); ok {
		_spec.SetField(permission.FieldServiceID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedServiceID(); ok {
		_spec.AddField(permission.FieldServiceID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.IsActive(); ok {
		_spec.SetField(permission.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.InternalName(); ok {
		_spec.SetField(permission.FieldInternalName, field.TypeString, value)
	}
	if pu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		createE := &RoleHasPermissionsCreate{config: pu.config, mutation: newRoleHasPermissionsMutation(pu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !pu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &RoleHasPermissionsCreate{config: pu.config, mutation: newRoleHasPermissionsMutation(pu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &RoleHasPermissionsCreate{config: pu.config, mutation: newRoleHasPermissionsMutation(pu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RoleHasPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permission.RoleHasPermissionsTable,
			Columns: []string{permission.RoleHasPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolehaspermissions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRoleHasPermissionsIDs(); len(nodes) > 0 && !pu.mutation.RoleHasPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permission.RoleHasPermissionsTable,
			Columns: []string{permission.RoleHasPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolehaspermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RoleHasPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permission.RoleHasPermissionsTable,
			Columns: []string{permission.RoleHasPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolehaspermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermissionUpdateOne is the builder for updating a single Permission entity.
type PermissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PermissionUpdateOne) SetUpdatedAt(t time.Time) *PermissionUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PermissionUpdateOne) SetDeletedAt(t time.Time) *PermissionUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDeletedAt(t *time.Time) *PermissionUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PermissionUpdateOne) ClearDeletedAt() *PermissionUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PermissionUpdateOne) SetUpdatedBy(i int) *PermissionUpdateOne {
	puo.mutation.ResetUpdatedBy()
	puo.mutation.SetUpdatedBy(i)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableUpdatedBy(i *int) *PermissionUpdateOne {
	if i != nil {
		puo.SetUpdatedBy(*i)
	}
	return puo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (puo *PermissionUpdateOne) AddUpdatedBy(i int) *PermissionUpdateOne {
	puo.mutation.AddUpdatedBy(i)
	return puo
}

// SetDeletedBy sets the "deleted_by" field.
func (puo *PermissionUpdateOne) SetDeletedBy(i int) *PermissionUpdateOne {
	puo.mutation.ResetDeletedBy()
	puo.mutation.SetDeletedBy(i)
	return puo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDeletedBy(i *int) *PermissionUpdateOne {
	if i != nil {
		puo.SetDeletedBy(*i)
	}
	return puo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (puo *PermissionUpdateOne) AddDeletedBy(i int) *PermissionUpdateOne {
	puo.mutation.AddDeletedBy(i)
	return puo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (puo *PermissionUpdateOne) ClearDeletedBy() *PermissionUpdateOne {
	puo.mutation.ClearDeletedBy()
	return puo
}

// SetServiceID sets the "service_id" field.
func (puo *PermissionUpdateOne) SetServiceID(i int) *PermissionUpdateOne {
	puo.mutation.ResetServiceID()
	puo.mutation.SetServiceID(i)
	return puo
}

// SetNillableServiceID sets the "service_id" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableServiceID(i *int) *PermissionUpdateOne {
	if i != nil {
		puo.SetServiceID(*i)
	}
	return puo
}

// AddServiceID adds i to the "service_id" field.
func (puo *PermissionUpdateOne) AddServiceID(i int) *PermissionUpdateOne {
	puo.mutation.AddServiceID(i)
	return puo
}

// SetName sets the "name" field.
func (puo *PermissionUpdateOne) SetName(s string) *PermissionUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableName(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PermissionUpdateOne) SetDescription(s string) *PermissionUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDescription(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PermissionUpdateOne) ClearDescription() *PermissionUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetIsActive sets the "is_active" field.
func (puo *PermissionUpdateOne) SetIsActive(b bool) *PermissionUpdateOne {
	puo.mutation.SetIsActive(b)
	return puo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableIsActive(b *bool) *PermissionUpdateOne {
	if b != nil {
		puo.SetIsActive(*b)
	}
	return puo
}

// SetInternalName sets the "internal_name" field.
func (puo *PermissionUpdateOne) SetInternalName(s string) *PermissionUpdateOne {
	puo.mutation.SetInternalName(s)
	return puo
}

// SetNillableInternalName sets the "internal_name" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableInternalName(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetInternalName(*s)
	}
	return puo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (puo *PermissionUpdateOne) AddRoleIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.AddRoleIDs(ids...)
	return puo
}

// AddRoles adds the "roles" edges to the Role entity.
func (puo *PermissionUpdateOne) AddRoles(r ...*Role) *PermissionUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRoleIDs(ids...)
}

// AddRoleHasPermissionIDs adds the "role_has_permissions" edge to the RoleHasPermissions entity by IDs.
func (puo *PermissionUpdateOne) AddRoleHasPermissionIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.AddRoleHasPermissionIDs(ids...)
	return puo
}

// AddRoleHasPermissions adds the "role_has_permissions" edges to the RoleHasPermissions entity.
func (puo *PermissionUpdateOne) AddRoleHasPermissions(r ...*RoleHasPermissions) *PermissionUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRoleHasPermissionIDs(ids...)
}

// Mutation returns the PermissionMutation object of the builder.
func (puo *PermissionUpdateOne) Mutation() *PermissionMutation {
	return puo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (puo *PermissionUpdateOne) ClearRoles() *PermissionUpdateOne {
	puo.mutation.ClearRoles()
	return puo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (puo *PermissionUpdateOne) RemoveRoleIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.RemoveRoleIDs(ids...)
	return puo
}

// RemoveRoles removes "roles" edges to Role entities.
func (puo *PermissionUpdateOne) RemoveRoles(r ...*Role) *PermissionUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRoleIDs(ids...)
}

// ClearRoleHasPermissions clears all "role_has_permissions" edges to the RoleHasPermissions entity.
func (puo *PermissionUpdateOne) ClearRoleHasPermissions() *PermissionUpdateOne {
	puo.mutation.ClearRoleHasPermissions()
	return puo
}

// RemoveRoleHasPermissionIDs removes the "role_has_permissions" edge to RoleHasPermissions entities by IDs.
func (puo *PermissionUpdateOne) RemoveRoleHasPermissionIDs(ids ...int) *PermissionUpdateOne {
	puo.mutation.RemoveRoleHasPermissionIDs(ids...)
	return puo
}

// RemoveRoleHasPermissions removes "role_has_permissions" edges to RoleHasPermissions entities.
func (puo *PermissionUpdateOne) RemoveRoleHasPermissions(r ...*RoleHasPermissions) *PermissionUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRoleHasPermissionIDs(ids...)
}

// Where appends a list predicates to the PermissionUpdate builder.
func (puo *PermissionUpdateOne) Where(ps ...predicate.Permission) *PermissionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermissionUpdateOne) Select(field string, fields ...string) *PermissionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Permission entity.
func (puo *PermissionUpdateOne) Save(ctx context.Context) (*Permission, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionUpdateOne) SaveX(ctx context.Context) *Permission {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PermissionUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if permission.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized permission.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := permission.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PermissionUpdateOne) check() error {
	if v, ok := puo.mutation.UpdatedBy(); ok {
		if err := permission.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Permission.updated_by": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := permission.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Permission.description": %w`, err)}
		}
	}
	if v, ok := puo.mutation.InternalName(); ok {
		if err := permission.InternalNameValidator(v); err != nil {
			return &ValidationError{Name: "internal_name", err: fmt.Errorf(`ent: validator failed for field "Permission.internal_name": %w`, err)}
		}
	}
	return nil
}

func (puo *PermissionUpdateOne) sqlSave(ctx context.Context) (_node *Permission, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Permission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permission.FieldID)
		for _, f := range fields {
			if !permission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(permission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(permission.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(permission.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(permission.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(permission.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.DeletedBy(); ok {
		_spec.SetField(permission.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(permission.FieldDeletedBy, field.TypeInt, value)
	}
	if puo.mutation.DeletedByCleared() {
		_spec.ClearField(permission.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := puo.mutation.ServiceID(); ok {
		_spec.SetField(permission.FieldServiceID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedServiceID(); ok {
		_spec.AddField(permission.FieldServiceID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.IsActive(); ok {
		_spec.SetField(permission.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.InternalName(); ok {
		_spec.SetField(permission.FieldInternalName, field.TypeString, value)
	}
	if puo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		createE := &RoleHasPermissionsCreate{config: puo.config, mutation: newRoleHasPermissionsMutation(puo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !puo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &RoleHasPermissionsCreate{config: puo.config, mutation: newRoleHasPermissionsMutation(puo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &RoleHasPermissionsCreate{config: puo.config, mutation: newRoleHasPermissionsMutation(puo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RoleHasPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permission.RoleHasPermissionsTable,
			Columns: []string{permission.RoleHasPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolehaspermissions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRoleHasPermissionsIDs(); len(nodes) > 0 && !puo.mutation.RoleHasPermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permission.RoleHasPermissionsTable,
			Columns: []string{permission.RoleHasPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolehaspermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RoleHasPermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   permission.RoleHasPermissionsTable,
			Columns: []string{permission.RoleHasPermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolehaspermissions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Permission{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
