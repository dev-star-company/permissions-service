// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"permission-service/internal/app/ent/firstlogin"
	"permission-service/internal/app/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FirstLogin is the model entity for the FirstLogin schema.
type FirstLogin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *int `json:"user_id,omitempty"`
	// Successful holds the value of the "successful" field.
	Successful bool `json:"successful,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FirstLoginQuery when eager-loading is set.
	Edges        FirstLoginEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FirstLoginEdges holds the relations/edges for other nodes in the graph.
type FirstLoginEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FirstLoginEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FirstLogin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case firstlogin.FieldSuccessful:
			values[i] = new(sql.NullBool)
		case firstlogin.FieldID, firstlogin.FieldCreatedBy, firstlogin.FieldUpdatedBy, firstlogin.FieldDeletedBy, firstlogin.FieldUserID:
			values[i] = new(sql.NullInt64)
		case firstlogin.FieldCreatedAt, firstlogin.FieldUpdatedAt, firstlogin.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FirstLogin fields.
func (fl *FirstLogin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case firstlogin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fl.ID = int(value.Int64)
		case firstlogin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fl.CreatedAt = value.Time
			}
		case firstlogin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fl.UpdatedAt = value.Time
			}
		case firstlogin.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fl.DeletedAt = new(time.Time)
				*fl.DeletedAt = value.Time
			}
		case firstlogin.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fl.CreatedBy = int(value.Int64)
			}
		case firstlogin.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fl.UpdatedBy = int(value.Int64)
			}
		case firstlogin.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				fl.DeletedBy = new(int)
				*fl.DeletedBy = int(value.Int64)
			}
		case firstlogin.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				fl.UserID = new(int)
				*fl.UserID = int(value.Int64)
			}
		case firstlogin.FieldSuccessful:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field successful", values[i])
			} else if value.Valid {
				fl.Successful = value.Bool
			}
		default:
			fl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FirstLogin.
// This includes values selected through modifiers, order, etc.
func (fl *FirstLogin) Value(name string) (ent.Value, error) {
	return fl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the FirstLogin entity.
func (fl *FirstLogin) QueryUser() *UserQuery {
	return NewFirstLoginClient(fl.config).QueryUser(fl)
}

// Update returns a builder for updating this FirstLogin.
// Note that you need to call FirstLogin.Unwrap() before calling this method if this FirstLogin
// was returned from a transaction, and the transaction was committed or rolled back.
func (fl *FirstLogin) Update() *FirstLoginUpdateOne {
	return NewFirstLoginClient(fl.config).UpdateOne(fl)
}

// Unwrap unwraps the FirstLogin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fl *FirstLogin) Unwrap() *FirstLogin {
	_tx, ok := fl.config.driver.(*txDriver)
	if !ok {
		panic("ent: FirstLogin is not a transactional entity")
	}
	fl.config.driver = _tx.drv
	return fl
}

// String implements the fmt.Stringer.
func (fl *FirstLogin) String() string {
	var builder strings.Builder
	builder.WriteString("FirstLogin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := fl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fl.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", fl.UpdatedBy))
	builder.WriteString(", ")
	if v := fl.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := fl.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("successful=")
	builder.WriteString(fmt.Sprintf("%v", fl.Successful))
	builder.WriteByte(')')
	return builder.String()
}

// FirstLogins is a parsable slice of FirstLogin.
type FirstLogins []*FirstLogin
