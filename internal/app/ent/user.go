// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"permission-service/internal/app/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Surname holds the value of the "Surname" field.
	Surname string `json:"Surname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Emails holds the value of the emails edge.
	Emails []*Email `json:"emails,omitempty"`
	// Passwords holds the value of the passwords edge.
	Passwords []*Password `json:"passwords,omitempty"`
	// Phones holds the value of the phones edge.
	Phones []*Phone `json:"phones,omitempty"`
	// Ban holds the value of the ban edge.
	Ban []*Ban `json:"ban,omitempty"`
	// FirstLogin holds the value of the first_login edge.
	FirstLogin []*FirstLogin `json:"first_login,omitempty"`
	// LoginAttempts holds the value of the login_attempts edge.
	LoginAttempts []*LoginAttempts `json:"login_attempts,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// UserHasRoles holds the value of the user_has_roles edge.
	UserHasRoles []*UserHasRoles `json:"user_has_roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// EmailsOrErr returns the Emails value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) EmailsOrErr() ([]*Email, error) {
	if e.loadedTypes[0] {
		return e.Emails, nil
	}
	return nil, &NotLoadedError{edge: "emails"}
}

// PasswordsOrErr returns the Passwords value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PasswordsOrErr() ([]*Password, error) {
	if e.loadedTypes[1] {
		return e.Passwords, nil
	}
	return nil, &NotLoadedError{edge: "passwords"}
}

// PhonesOrErr returns the Phones value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PhonesOrErr() ([]*Phone, error) {
	if e.loadedTypes[2] {
		return e.Phones, nil
	}
	return nil, &NotLoadedError{edge: "phones"}
}

// BanOrErr returns the Ban value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BanOrErr() ([]*Ban, error) {
	if e.loadedTypes[3] {
		return e.Ban, nil
	}
	return nil, &NotLoadedError{edge: "ban"}
}

// FirstLoginOrErr returns the FirstLogin value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FirstLoginOrErr() ([]*FirstLogin, error) {
	if e.loadedTypes[4] {
		return e.FirstLogin, nil
	}
	return nil, &NotLoadedError{edge: "first_login"}
}

// LoginAttemptsOrErr returns the LoginAttempts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LoginAttemptsOrErr() ([]*LoginAttempts, error) {
	if e.loadedTypes[5] {
		return e.LoginAttempts, nil
	}
	return nil, &NotLoadedError{edge: "login_attempts"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[6] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// UserHasRolesOrErr returns the UserHasRoles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserHasRolesOrErr() ([]*UserHasRoles, error) {
	if e.loadedTypes[7] {
		return e.UserHasRoles, nil
	}
	return nil, &NotLoadedError{edge: "user_has_roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldCreatedBy, user.FieldUpdatedBy, user.FieldDeletedBy:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldSurname:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = new(time.Time)
				*u.DeletedAt = value.Time
			}
		case user.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				u.CreatedBy = int(value.Int64)
			}
		case user.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				u.UpdatedBy = int(value.Int64)
			}
		case user.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				u.DeletedBy = new(int)
				*u.DeletedBy = int(value.Int64)
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Surname", values[i])
			} else if value.Valid {
				u.Surname = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryEmails queries the "emails" edge of the User entity.
func (u *User) QueryEmails() *EmailQuery {
	return NewUserClient(u.config).QueryEmails(u)
}

// QueryPasswords queries the "passwords" edge of the User entity.
func (u *User) QueryPasswords() *PasswordQuery {
	return NewUserClient(u.config).QueryPasswords(u)
}

// QueryPhones queries the "phones" edge of the User entity.
func (u *User) QueryPhones() *PhoneQuery {
	return NewUserClient(u.config).QueryPhones(u)
}

// QueryBan queries the "ban" edge of the User entity.
func (u *User) QueryBan() *BanQuery {
	return NewUserClient(u.config).QueryBan(u)
}

// QueryFirstLogin queries the "first_login" edge of the User entity.
func (u *User) QueryFirstLogin() *FirstLoginQuery {
	return NewUserClient(u.config).QueryFirstLogin(u)
}

// QueryLoginAttempts queries the "login_attempts" edge of the User entity.
func (u *User) QueryLoginAttempts() *LoginAttemptsQuery {
	return NewUserClient(u.config).QueryLoginAttempts(u)
}

// QueryRoles queries the "roles" edge of the User entity.
func (u *User) QueryRoles() *RoleQuery {
	return NewUserClient(u.config).QueryRoles(u)
}

// QueryUserHasRoles queries the "user_has_roles" edge of the User entity.
func (u *User) QueryUserHasRoles() *UserHasRolesQuery {
	return NewUserClient(u.config).QueryUserHasRoles(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := u.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", u.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", u.UpdatedBy))
	builder.WriteString(", ")
	if v := u.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("Surname=")
	builder.WriteString(u.Surname)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
