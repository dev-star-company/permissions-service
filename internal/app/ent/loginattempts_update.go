// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/loginattempts"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginAttemptsUpdate is the builder for updating LoginAttempts entities.
type LoginAttemptsUpdate struct {
	config
	hooks    []Hook
	mutation *LoginAttemptsMutation
}

// Where appends a list predicates to the LoginAttemptsUpdate builder.
func (lau *LoginAttemptsUpdate) Where(ps ...predicate.LoginAttempts) *LoginAttemptsUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetUpdatedAt sets the "updated_at" field.
func (lau *LoginAttemptsUpdate) SetUpdatedAt(t time.Time) *LoginAttemptsUpdate {
	lau.mutation.SetUpdatedAt(t)
	return lau
}

// SetDeletedAt sets the "deleted_at" field.
func (lau *LoginAttemptsUpdate) SetDeletedAt(t time.Time) *LoginAttemptsUpdate {
	lau.mutation.SetDeletedAt(t)
	return lau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lau *LoginAttemptsUpdate) SetNillableDeletedAt(t *time.Time) *LoginAttemptsUpdate {
	if t != nil {
		lau.SetDeletedAt(*t)
	}
	return lau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (lau *LoginAttemptsUpdate) ClearDeletedAt() *LoginAttemptsUpdate {
	lau.mutation.ClearDeletedAt()
	return lau
}

// SetUpdatedBy sets the "updated_by" field.
func (lau *LoginAttemptsUpdate) SetUpdatedBy(i int) *LoginAttemptsUpdate {
	lau.mutation.ResetUpdatedBy()
	lau.mutation.SetUpdatedBy(i)
	return lau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lau *LoginAttemptsUpdate) SetNillableUpdatedBy(i *int) *LoginAttemptsUpdate {
	if i != nil {
		lau.SetUpdatedBy(*i)
	}
	return lau
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lau *LoginAttemptsUpdate) AddUpdatedBy(i int) *LoginAttemptsUpdate {
	lau.mutation.AddUpdatedBy(i)
	return lau
}

// SetDeletedBy sets the "deleted_by" field.
func (lau *LoginAttemptsUpdate) SetDeletedBy(i int) *LoginAttemptsUpdate {
	lau.mutation.ResetDeletedBy()
	lau.mutation.SetDeletedBy(i)
	return lau
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (lau *LoginAttemptsUpdate) SetNillableDeletedBy(i *int) *LoginAttemptsUpdate {
	if i != nil {
		lau.SetDeletedBy(*i)
	}
	return lau
}

// AddDeletedBy adds i to the "deleted_by" field.
func (lau *LoginAttemptsUpdate) AddDeletedBy(i int) *LoginAttemptsUpdate {
	lau.mutation.AddDeletedBy(i)
	return lau
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (lau *LoginAttemptsUpdate) ClearDeletedBy() *LoginAttemptsUpdate {
	lau.mutation.ClearDeletedBy()
	return lau
}

// SetUserID sets the "user_id" field.
func (lau *LoginAttemptsUpdate) SetUserID(i int) *LoginAttemptsUpdate {
	lau.mutation.SetUserID(i)
	return lau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lau *LoginAttemptsUpdate) SetNillableUserID(i *int) *LoginAttemptsUpdate {
	if i != nil {
		lau.SetUserID(*i)
	}
	return lau
}

// SetSuccessful sets the "successful" field.
func (lau *LoginAttemptsUpdate) SetSuccessful(b bool) *LoginAttemptsUpdate {
	lau.mutation.SetSuccessful(b)
	return lau
}

// SetNillableSuccessful sets the "successful" field if the given value is not nil.
func (lau *LoginAttemptsUpdate) SetNillableSuccessful(b *bool) *LoginAttemptsUpdate {
	if b != nil {
		lau.SetSuccessful(*b)
	}
	return lau
}

// SetUser sets the "user" edge to the User entity.
func (lau *LoginAttemptsUpdate) SetUser(u *User) *LoginAttemptsUpdate {
	return lau.SetUserID(u.ID)
}

// Mutation returns the LoginAttemptsMutation object of the builder.
func (lau *LoginAttemptsUpdate) Mutation() *LoginAttemptsMutation {
	return lau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lau *LoginAttemptsUpdate) ClearUser() *LoginAttemptsUpdate {
	lau.mutation.ClearUser()
	return lau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LoginAttemptsUpdate) Save(ctx context.Context) (int, error) {
	lau.defaults()
	return withHooks(ctx, lau.sqlSave, lau.mutation, lau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LoginAttemptsUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LoginAttemptsUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LoginAttemptsUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lau *LoginAttemptsUpdate) defaults() {
	if _, ok := lau.mutation.UpdatedAt(); !ok {
		v := loginattempts.UpdateDefaultUpdatedAt()
		lau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lau *LoginAttemptsUpdate) check() error {
	if v, ok := lau.mutation.UpdatedBy(); ok {
		if err := loginattempts.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "LoginAttempts.updated_by": %w`, err)}
		}
	}
	if lau.mutation.UserCleared() && len(lau.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LoginAttempts.user"`)
	}
	return nil
}

func (lau *LoginAttemptsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(loginattempts.Table, loginattempts.Columns, sqlgraph.NewFieldSpec(loginattempts.FieldID, field.TypeInt))
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lau.mutation.UpdatedAt(); ok {
		_spec.SetField(loginattempts.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lau.mutation.DeletedAt(); ok {
		_spec.SetField(loginattempts.FieldDeletedAt, field.TypeTime, value)
	}
	if lau.mutation.DeletedAtCleared() {
		_spec.ClearField(loginattempts.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := lau.mutation.UpdatedBy(); ok {
		_spec.SetField(loginattempts.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := lau.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(loginattempts.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := lau.mutation.DeletedBy(); ok {
		_spec.SetField(loginattempts.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := lau.mutation.AddedDeletedBy(); ok {
		_spec.AddField(loginattempts.FieldDeletedBy, field.TypeInt, value)
	}
	if lau.mutation.DeletedByCleared() {
		_spec.ClearField(loginattempts.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := lau.mutation.Successful(); ok {
		_spec.SetField(loginattempts.FieldSuccessful, field.TypeBool, value)
	}
	if lau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginattempts.UserTable,
			Columns: []string{loginattempts.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginattempts.UserTable,
			Columns: []string{loginattempts.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginattempts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lau.mutation.done = true
	return n, nil
}

// LoginAttemptsUpdateOne is the builder for updating a single LoginAttempts entity.
type LoginAttemptsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginAttemptsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lauo *LoginAttemptsUpdateOne) SetUpdatedAt(t time.Time) *LoginAttemptsUpdateOne {
	lauo.mutation.SetUpdatedAt(t)
	return lauo
}

// SetDeletedAt sets the "deleted_at" field.
func (lauo *LoginAttemptsUpdateOne) SetDeletedAt(t time.Time) *LoginAttemptsUpdateOne {
	lauo.mutation.SetDeletedAt(t)
	return lauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lauo *LoginAttemptsUpdateOne) SetNillableDeletedAt(t *time.Time) *LoginAttemptsUpdateOne {
	if t != nil {
		lauo.SetDeletedAt(*t)
	}
	return lauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (lauo *LoginAttemptsUpdateOne) ClearDeletedAt() *LoginAttemptsUpdateOne {
	lauo.mutation.ClearDeletedAt()
	return lauo
}

// SetUpdatedBy sets the "updated_by" field.
func (lauo *LoginAttemptsUpdateOne) SetUpdatedBy(i int) *LoginAttemptsUpdateOne {
	lauo.mutation.ResetUpdatedBy()
	lauo.mutation.SetUpdatedBy(i)
	return lauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (lauo *LoginAttemptsUpdateOne) SetNillableUpdatedBy(i *int) *LoginAttemptsUpdateOne {
	if i != nil {
		lauo.SetUpdatedBy(*i)
	}
	return lauo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (lauo *LoginAttemptsUpdateOne) AddUpdatedBy(i int) *LoginAttemptsUpdateOne {
	lauo.mutation.AddUpdatedBy(i)
	return lauo
}

// SetDeletedBy sets the "deleted_by" field.
func (lauo *LoginAttemptsUpdateOne) SetDeletedBy(i int) *LoginAttemptsUpdateOne {
	lauo.mutation.ResetDeletedBy()
	lauo.mutation.SetDeletedBy(i)
	return lauo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (lauo *LoginAttemptsUpdateOne) SetNillableDeletedBy(i *int) *LoginAttemptsUpdateOne {
	if i != nil {
		lauo.SetDeletedBy(*i)
	}
	return lauo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (lauo *LoginAttemptsUpdateOne) AddDeletedBy(i int) *LoginAttemptsUpdateOne {
	lauo.mutation.AddDeletedBy(i)
	return lauo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (lauo *LoginAttemptsUpdateOne) ClearDeletedBy() *LoginAttemptsUpdateOne {
	lauo.mutation.ClearDeletedBy()
	return lauo
}

// SetUserID sets the "user_id" field.
func (lauo *LoginAttemptsUpdateOne) SetUserID(i int) *LoginAttemptsUpdateOne {
	lauo.mutation.SetUserID(i)
	return lauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lauo *LoginAttemptsUpdateOne) SetNillableUserID(i *int) *LoginAttemptsUpdateOne {
	if i != nil {
		lauo.SetUserID(*i)
	}
	return lauo
}

// SetSuccessful sets the "successful" field.
func (lauo *LoginAttemptsUpdateOne) SetSuccessful(b bool) *LoginAttemptsUpdateOne {
	lauo.mutation.SetSuccessful(b)
	return lauo
}

// SetNillableSuccessful sets the "successful" field if the given value is not nil.
func (lauo *LoginAttemptsUpdateOne) SetNillableSuccessful(b *bool) *LoginAttemptsUpdateOne {
	if b != nil {
		lauo.SetSuccessful(*b)
	}
	return lauo
}

// SetUser sets the "user" edge to the User entity.
func (lauo *LoginAttemptsUpdateOne) SetUser(u *User) *LoginAttemptsUpdateOne {
	return lauo.SetUserID(u.ID)
}

// Mutation returns the LoginAttemptsMutation object of the builder.
func (lauo *LoginAttemptsUpdateOne) Mutation() *LoginAttemptsMutation {
	return lauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lauo *LoginAttemptsUpdateOne) ClearUser() *LoginAttemptsUpdateOne {
	lauo.mutation.ClearUser()
	return lauo
}

// Where appends a list predicates to the LoginAttemptsUpdate builder.
func (lauo *LoginAttemptsUpdateOne) Where(ps ...predicate.LoginAttempts) *LoginAttemptsUpdateOne {
	lauo.mutation.Where(ps...)
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LoginAttemptsUpdateOne) Select(field string, fields ...string) *LoginAttemptsUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LoginAttempts entity.
func (lauo *LoginAttemptsUpdateOne) Save(ctx context.Context) (*LoginAttempts, error) {
	lauo.defaults()
	return withHooks(ctx, lauo.sqlSave, lauo.mutation, lauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LoginAttemptsUpdateOne) SaveX(ctx context.Context) *LoginAttempts {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LoginAttemptsUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LoginAttemptsUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lauo *LoginAttemptsUpdateOne) defaults() {
	if _, ok := lauo.mutation.UpdatedAt(); !ok {
		v := loginattempts.UpdateDefaultUpdatedAt()
		lauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lauo *LoginAttemptsUpdateOne) check() error {
	if v, ok := lauo.mutation.UpdatedBy(); ok {
		if err := loginattempts.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "LoginAttempts.updated_by": %w`, err)}
		}
	}
	if lauo.mutation.UserCleared() && len(lauo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LoginAttempts.user"`)
	}
	return nil
}

func (lauo *LoginAttemptsUpdateOne) sqlSave(ctx context.Context) (_node *LoginAttempts, err error) {
	if err := lauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loginattempts.Table, loginattempts.Columns, sqlgraph.NewFieldSpec(loginattempts.FieldID, field.TypeInt))
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginAttempts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginattempts.FieldID)
		for _, f := range fields {
			if !loginattempts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginattempts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lauo.mutation.UpdatedAt(); ok {
		_spec.SetField(loginattempts.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lauo.mutation.DeletedAt(); ok {
		_spec.SetField(loginattempts.FieldDeletedAt, field.TypeTime, value)
	}
	if lauo.mutation.DeletedAtCleared() {
		_spec.ClearField(loginattempts.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := lauo.mutation.UpdatedBy(); ok {
		_spec.SetField(loginattempts.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := lauo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(loginattempts.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := lauo.mutation.DeletedBy(); ok {
		_spec.SetField(loginattempts.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := lauo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(loginattempts.FieldDeletedBy, field.TypeInt, value)
	}
	if lauo.mutation.DeletedByCleared() {
		_spec.ClearField(loginattempts.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := lauo.mutation.Successful(); ok {
		_spec.SetField(loginattempts.FieldSuccessful, field.TypeBool, value)
	}
	if lauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginattempts.UserTable,
			Columns: []string{loginattempts.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginattempts.UserTable,
			Columns: []string{loginattempts.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoginAttempts{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginattempts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lauo.mutation.done = true
	return _node, nil
}
