// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/rolehaspermissions"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleHasPermissionsCreate is the builder for creating a RoleHasPermissions entity.
type RoleHasPermissionsCreate struct {
	config
	mutation *RoleHasPermissionsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rhpc *RoleHasPermissionsCreate) SetCreatedAt(t time.Time) *RoleHasPermissionsCreate {
	rhpc.mutation.SetCreatedAt(t)
	return rhpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rhpc *RoleHasPermissionsCreate) SetNillableCreatedAt(t *time.Time) *RoleHasPermissionsCreate {
	if t != nil {
		rhpc.SetCreatedAt(*t)
	}
	return rhpc
}

// SetUpdatedAt sets the "updated_at" field.
func (rhpc *RoleHasPermissionsCreate) SetUpdatedAt(t time.Time) *RoleHasPermissionsCreate {
	rhpc.mutation.SetUpdatedAt(t)
	return rhpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rhpc *RoleHasPermissionsCreate) SetNillableUpdatedAt(t *time.Time) *RoleHasPermissionsCreate {
	if t != nil {
		rhpc.SetUpdatedAt(*t)
	}
	return rhpc
}

// SetDeletedAt sets the "deleted_at" field.
func (rhpc *RoleHasPermissionsCreate) SetDeletedAt(t time.Time) *RoleHasPermissionsCreate {
	rhpc.mutation.SetDeletedAt(t)
	return rhpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rhpc *RoleHasPermissionsCreate) SetNillableDeletedAt(t *time.Time) *RoleHasPermissionsCreate {
	if t != nil {
		rhpc.SetDeletedAt(*t)
	}
	return rhpc
}

// SetCreatedBy sets the "created_by" field.
func (rhpc *RoleHasPermissionsCreate) SetCreatedBy(i int) *RoleHasPermissionsCreate {
	rhpc.mutation.SetCreatedBy(i)
	return rhpc
}

// SetUpdatedBy sets the "updated_by" field.
func (rhpc *RoleHasPermissionsCreate) SetUpdatedBy(i int) *RoleHasPermissionsCreate {
	rhpc.mutation.SetUpdatedBy(i)
	return rhpc
}

// SetDeletedBy sets the "deleted_by" field.
func (rhpc *RoleHasPermissionsCreate) SetDeletedBy(i int) *RoleHasPermissionsCreate {
	rhpc.mutation.SetDeletedBy(i)
	return rhpc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rhpc *RoleHasPermissionsCreate) SetNillableDeletedBy(i *int) *RoleHasPermissionsCreate {
	if i != nil {
		rhpc.SetDeletedBy(*i)
	}
	return rhpc
}

// SetRoleID sets the "role_id" field.
func (rhpc *RoleHasPermissionsCreate) SetRoleID(i int) *RoleHasPermissionsCreate {
	rhpc.mutation.SetRoleID(i)
	return rhpc
}

// SetPermissionID sets the "permission_id" field.
func (rhpc *RoleHasPermissionsCreate) SetPermissionID(i int) *RoleHasPermissionsCreate {
	rhpc.mutation.SetPermissionID(i)
	return rhpc
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (rhpc *RoleHasPermissionsCreate) SetRolesID(id int) *RoleHasPermissionsCreate {
	rhpc.mutation.SetRolesID(id)
	return rhpc
}

// SetRoles sets the "roles" edge to the Role entity.
func (rhpc *RoleHasPermissionsCreate) SetRoles(r *Role) *RoleHasPermissionsCreate {
	return rhpc.SetRolesID(r.ID)
}

// SetPermissionsID sets the "permissions" edge to the Permission entity by ID.
func (rhpc *RoleHasPermissionsCreate) SetPermissionsID(id int) *RoleHasPermissionsCreate {
	rhpc.mutation.SetPermissionsID(id)
	return rhpc
}

// SetPermissions sets the "permissions" edge to the Permission entity.
func (rhpc *RoleHasPermissionsCreate) SetPermissions(p *Permission) *RoleHasPermissionsCreate {
	return rhpc.SetPermissionsID(p.ID)
}

// Mutation returns the RoleHasPermissionsMutation object of the builder.
func (rhpc *RoleHasPermissionsCreate) Mutation() *RoleHasPermissionsMutation {
	return rhpc.mutation
}

// Save creates the RoleHasPermissions in the database.
func (rhpc *RoleHasPermissionsCreate) Save(ctx context.Context) (*RoleHasPermissions, error) {
	rhpc.defaults()
	return withHooks(ctx, rhpc.sqlSave, rhpc.mutation, rhpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rhpc *RoleHasPermissionsCreate) SaveX(ctx context.Context) *RoleHasPermissions {
	v, err := rhpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rhpc *RoleHasPermissionsCreate) Exec(ctx context.Context) error {
	_, err := rhpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhpc *RoleHasPermissionsCreate) ExecX(ctx context.Context) {
	if err := rhpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rhpc *RoleHasPermissionsCreate) defaults() {
	if _, ok := rhpc.mutation.CreatedAt(); !ok {
		v := rolehaspermissions.DefaultCreatedAt()
		rhpc.mutation.SetCreatedAt(v)
	}
	if _, ok := rhpc.mutation.UpdatedAt(); !ok {
		v := rolehaspermissions.DefaultUpdatedAt()
		rhpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rhpc *RoleHasPermissionsCreate) check() error {
	if _, ok := rhpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoleHasPermissions.created_at"`)}
	}
	if _, ok := rhpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoleHasPermissions.updated_at"`)}
	}
	if _, ok := rhpc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "RoleHasPermissions.created_by"`)}
	}
	if v, ok := rhpc.mutation.CreatedBy(); ok {
		if err := rolehaspermissions.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.created_by": %w`, err)}
		}
	}
	if _, ok := rhpc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "RoleHasPermissions.updated_by"`)}
	}
	if v, ok := rhpc.mutation.UpdatedBy(); ok {
		if err := rolehaspermissions.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.updated_by": %w`, err)}
		}
	}
	if _, ok := rhpc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "RoleHasPermissions.role_id"`)}
	}
	if v, ok := rhpc.mutation.RoleID(); ok {
		if err := rolehaspermissions.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.role_id": %w`, err)}
		}
	}
	if _, ok := rhpc.mutation.PermissionID(); !ok {
		return &ValidationError{Name: "permission_id", err: errors.New(`ent: missing required field "RoleHasPermissions.permission_id"`)}
	}
	if v, ok := rhpc.mutation.PermissionID(); ok {
		if err := rolehaspermissions.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.permission_id": %w`, err)}
		}
	}
	if len(rhpc.mutation.RolesIDs()) == 0 {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required edge "RoleHasPermissions.roles"`)}
	}
	if len(rhpc.mutation.PermissionsIDs()) == 0 {
		return &ValidationError{Name: "permissions", err: errors.New(`ent: missing required edge "RoleHasPermissions.permissions"`)}
	}
	return nil
}

func (rhpc *RoleHasPermissionsCreate) sqlSave(ctx context.Context) (*RoleHasPermissions, error) {
	if err := rhpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rhpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rhpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (rhpc *RoleHasPermissionsCreate) createSpec() (*RoleHasPermissions, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleHasPermissions{config: rhpc.config}
		_spec = sqlgraph.NewCreateSpec(rolehaspermissions.Table, nil)
	)
	if value, ok := rhpc.mutation.CreatedAt(); ok {
		_spec.SetField(rolehaspermissions.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rhpc.mutation.UpdatedAt(); ok {
		_spec.SetField(rolehaspermissions.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rhpc.mutation.DeletedAt(); ok {
		_spec.SetField(rolehaspermissions.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rhpc.mutation.CreatedBy(); ok {
		_spec.SetField(rolehaspermissions.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := rhpc.mutation.UpdatedBy(); ok {
		_spec.SetField(rolehaspermissions.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := rhpc.mutation.DeletedBy(); ok {
		_spec.SetField(rolehaspermissions.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if nodes := rhpc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.RolesTable,
			Columns: []string{rolehaspermissions.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rhpc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.PermissionsTable,
			Columns: []string{rolehaspermissions.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PermissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoleHasPermissionsCreateBulk is the builder for creating many RoleHasPermissions entities in bulk.
type RoleHasPermissionsCreateBulk struct {
	config
	err      error
	builders []*RoleHasPermissionsCreate
}

// Save creates the RoleHasPermissions entities in the database.
func (rhpcb *RoleHasPermissionsCreateBulk) Save(ctx context.Context) ([]*RoleHasPermissions, error) {
	if rhpcb.err != nil {
		return nil, rhpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rhpcb.builders))
	nodes := make([]*RoleHasPermissions, len(rhpcb.builders))
	mutators := make([]Mutator, len(rhpcb.builders))
	for i := range rhpcb.builders {
		func(i int, root context.Context) {
			builder := rhpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleHasPermissionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rhpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rhpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rhpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rhpcb *RoleHasPermissionsCreateBulk) SaveX(ctx context.Context) []*RoleHasPermissions {
	v, err := rhpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rhpcb *RoleHasPermissionsCreateBulk) Exec(ctx context.Context) error {
	_, err := rhpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhpcb *RoleHasPermissionsCreateBulk) ExecX(ctx context.Context) {
	if err := rhpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
