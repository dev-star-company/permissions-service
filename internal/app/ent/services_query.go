// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/services"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServicesQuery is the builder for querying Services entities.
type ServicesQuery struct {
	config
	ctx            *QueryContext
	order          []services.OrderOption
	inters         []Interceptor
	predicates     []predicate.Services
	withPermission *PermissionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServicesQuery builder.
func (sq *ServicesQuery) Where(ps ...predicate.Services) *ServicesQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *ServicesQuery) Limit(limit int) *ServicesQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *ServicesQuery) Offset(offset int) *ServicesQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *ServicesQuery) Unique(unique bool) *ServicesQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *ServicesQuery) Order(o ...services.OrderOption) *ServicesQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryPermission chains the current query on the "permission" edge.
func (sq *ServicesQuery) QueryPermission() *PermissionQuery {
	query := (&PermissionClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(services.Table, services.FieldID, selector),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, services.PermissionTable, services.PermissionColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Services entity from the query.
// Returns a *NotFoundError when no Services was found.
func (sq *ServicesQuery) First(ctx context.Context) (*Services, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{services.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *ServicesQuery) FirstX(ctx context.Context) *Services {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Services ID from the query.
// Returns a *NotFoundError when no Services ID was found.
func (sq *ServicesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{services.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *ServicesQuery) FirstIDX(ctx context.Context) int {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Services entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Services entity is found.
// Returns a *NotFoundError when no Services entities are found.
func (sq *ServicesQuery) Only(ctx context.Context) (*Services, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{services.Label}
	default:
		return nil, &NotSingularError{services.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *ServicesQuery) OnlyX(ctx context.Context) *Services {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Services ID in the query.
// Returns a *NotSingularError when more than one Services ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *ServicesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{services.Label}
	default:
		err = &NotSingularError{services.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *ServicesQuery) OnlyIDX(ctx context.Context) int {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServicesSlice.
func (sq *ServicesQuery) All(ctx context.Context) ([]*Services, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryAll)
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Services, *ServicesQuery]()
	return withInterceptors[[]*Services](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *ServicesQuery) AllX(ctx context.Context) []*Services {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Services IDs.
func (sq *ServicesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryIDs)
	if err = sq.Select(services.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *ServicesQuery) IDsX(ctx context.Context) []int {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *ServicesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryCount)
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*ServicesQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *ServicesQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *ServicesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryExist)
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *ServicesQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServicesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *ServicesQuery) Clone() *ServicesQuery {
	if sq == nil {
		return nil
	}
	return &ServicesQuery{
		config:         sq.config,
		ctx:            sq.ctx.Clone(),
		order:          append([]services.OrderOption{}, sq.order...),
		inters:         append([]Interceptor{}, sq.inters...),
		predicates:     append([]predicate.Services{}, sq.predicates...),
		withPermission: sq.withPermission.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithPermission tells the query-builder to eager-load the nodes that are connected to
// the "permission" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *ServicesQuery) WithPermission(opts ...func(*PermissionQuery)) *ServicesQuery {
	query := (&PermissionClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withPermission = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Services.Query().
//		GroupBy(services.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *ServicesQuery) GroupBy(field string, fields ...string) *ServicesGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServicesGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = services.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Services.Query().
//		Select(services.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *ServicesQuery) Select(fields ...string) *ServicesSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &ServicesSelect{ServicesQuery: sq}
	sbuild.label = services.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServicesSelect configured with the given aggregations.
func (sq *ServicesQuery) Aggregate(fns ...AggregateFunc) *ServicesSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *ServicesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !services.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *ServicesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Services, error) {
	var (
		nodes       = []*Services{}
		_spec       = sq.querySpec()
		loadedTypes = [1]bool{
			sq.withPermission != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Services).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Services{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withPermission; query != nil {
		if err := sq.loadPermission(ctx, query, nodes,
			func(n *Services) { n.Edges.Permission = []*Permission{} },
			func(n *Services, e *Permission) { n.Edges.Permission = append(n.Edges.Permission, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *ServicesQuery) loadPermission(ctx context.Context, query *PermissionQuery, nodes []*Services, init func(*Services), assign func(*Services, *Permission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Services)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Permission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(services.PermissionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.services_permission
		if fk == nil {
			return fmt.Errorf(`foreign-key "services_permission" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "services_permission" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sq *ServicesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *ServicesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(services.Table, services.Columns, sqlgraph.NewFieldSpec(services.FieldID, field.TypeInt))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, services.FieldID)
		for i := range fields {
			if fields[i] != services.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *ServicesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(services.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = services.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ServicesGroupBy is the group-by builder for Services entities.
type ServicesGroupBy struct {
	selector
	build *ServicesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *ServicesGroupBy) Aggregate(fns ...AggregateFunc) *ServicesGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *ServicesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, ent.OpQueryGroupBy)
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServicesQuery, *ServicesGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *ServicesGroupBy) sqlScan(ctx context.Context, root *ServicesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServicesSelect is the builder for selecting fields of Services entities.
type ServicesSelect struct {
	*ServicesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *ServicesSelect) Aggregate(fns ...AggregateFunc) *ServicesSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *ServicesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, ent.OpQuerySelect)
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServicesQuery, *ServicesSelect](ctx, ss.ServicesQuery, ss, ss.inters, v)
}

func (ss *ServicesSelect) sqlScan(ctx context.Context, root *ServicesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
