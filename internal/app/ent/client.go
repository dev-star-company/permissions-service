// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"permission-service/internal/app/ent/migrate"

	"permission-service/internal/app/ent/ban"
	"permission-service/internal/app/ent/email"
	"permission-service/internal/app/ent/firstlogin"
	"permission-service/internal/app/ent/loginattempts"
	"permission-service/internal/app/ent/password"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/phone"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/rolehaspermissions"
	"permission-service/internal/app/ent/services"
	"permission-service/internal/app/ent/user"
	"permission-service/internal/app/ent/userhasroles"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Ban is the client for interacting with the Ban builders.
	Ban *BanClient
	// Email is the client for interacting with the Email builders.
	Email *EmailClient
	// FirstLogin is the client for interacting with the FirstLogin builders.
	FirstLogin *FirstLoginClient
	// LoginAttempts is the client for interacting with the LoginAttempts builders.
	LoginAttempts *LoginAttemptsClient
	// Password is the client for interacting with the Password builders.
	Password *PasswordClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// Phone is the client for interacting with the Phone builders.
	Phone *PhoneClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// RoleHasPermissions is the client for interacting with the RoleHasPermissions builders.
	RoleHasPermissions *RoleHasPermissionsClient
	// Services is the client for interacting with the Services builders.
	Services *ServicesClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserHasRoles is the client for interacting with the UserHasRoles builders.
	UserHasRoles *UserHasRolesClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Ban = NewBanClient(c.config)
	c.Email = NewEmailClient(c.config)
	c.FirstLogin = NewFirstLoginClient(c.config)
	c.LoginAttempts = NewLoginAttemptsClient(c.config)
	c.Password = NewPasswordClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.Phone = NewPhoneClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.RoleHasPermissions = NewRoleHasPermissionsClient(c.config)
	c.Services = NewServicesClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserHasRoles = NewUserHasRolesClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Ban:                NewBanClient(cfg),
		Email:              NewEmailClient(cfg),
		FirstLogin:         NewFirstLoginClient(cfg),
		LoginAttempts:      NewLoginAttemptsClient(cfg),
		Password:           NewPasswordClient(cfg),
		Permission:         NewPermissionClient(cfg),
		Phone:              NewPhoneClient(cfg),
		Role:               NewRoleClient(cfg),
		RoleHasPermissions: NewRoleHasPermissionsClient(cfg),
		Services:           NewServicesClient(cfg),
		User:               NewUserClient(cfg),
		UserHasRoles:       NewUserHasRolesClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		Ban:                NewBanClient(cfg),
		Email:              NewEmailClient(cfg),
		FirstLogin:         NewFirstLoginClient(cfg),
		LoginAttempts:      NewLoginAttemptsClient(cfg),
		Password:           NewPasswordClient(cfg),
		Permission:         NewPermissionClient(cfg),
		Phone:              NewPhoneClient(cfg),
		Role:               NewRoleClient(cfg),
		RoleHasPermissions: NewRoleHasPermissionsClient(cfg),
		Services:           NewServicesClient(cfg),
		User:               NewUserClient(cfg),
		UserHasRoles:       NewUserHasRolesClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Ban.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Ban, c.Email, c.FirstLogin, c.LoginAttempts, c.Password, c.Permission,
		c.Phone, c.Role, c.RoleHasPermissions, c.Services, c.User, c.UserHasRoles,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Ban, c.Email, c.FirstLogin, c.LoginAttempts, c.Password, c.Permission,
		c.Phone, c.Role, c.RoleHasPermissions, c.Services, c.User, c.UserHasRoles,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BanMutation:
		return c.Ban.mutate(ctx, m)
	case *EmailMutation:
		return c.Email.mutate(ctx, m)
	case *FirstLoginMutation:
		return c.FirstLogin.mutate(ctx, m)
	case *LoginAttemptsMutation:
		return c.LoginAttempts.mutate(ctx, m)
	case *PasswordMutation:
		return c.Password.mutate(ctx, m)
	case *PermissionMutation:
		return c.Permission.mutate(ctx, m)
	case *PhoneMutation:
		return c.Phone.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *RoleHasPermissionsMutation:
		return c.RoleHasPermissions.mutate(ctx, m)
	case *ServicesMutation:
		return c.Services.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserHasRolesMutation:
		return c.UserHasRoles.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BanClient is a client for the Ban schema.
type BanClient struct {
	config
}

// NewBanClient returns a client for the Ban from the given config.
func NewBanClient(c config) *BanClient {
	return &BanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ban.Hooks(f(g(h())))`.
func (c *BanClient) Use(hooks ...Hook) {
	c.hooks.Ban = append(c.hooks.Ban, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ban.Intercept(f(g(h())))`.
func (c *BanClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ban = append(c.inters.Ban, interceptors...)
}

// Create returns a builder for creating a Ban entity.
func (c *BanClient) Create() *BanCreate {
	mutation := newBanMutation(c.config, OpCreate)
	return &BanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ban entities.
func (c *BanClient) CreateBulk(builders ...*BanCreate) *BanCreateBulk {
	return &BanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BanClient) MapCreateBulk(slice any, setFunc func(*BanCreate, int)) *BanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BanCreateBulk{err: fmt.Errorf("calling to BanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ban.
func (c *BanClient) Update() *BanUpdate {
	mutation := newBanMutation(c.config, OpUpdate)
	return &BanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BanClient) UpdateOne(b *Ban) *BanUpdateOne {
	mutation := newBanMutation(c.config, OpUpdateOne, withBan(b))
	return &BanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BanClient) UpdateOneID(id int) *BanUpdateOne {
	mutation := newBanMutation(c.config, OpUpdateOne, withBanID(id))
	return &BanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ban.
func (c *BanClient) Delete() *BanDelete {
	mutation := newBanMutation(c.config, OpDelete)
	return &BanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BanClient) DeleteOne(b *Ban) *BanDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BanClient) DeleteOneID(id int) *BanDeleteOne {
	builder := c.Delete().Where(ban.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BanDeleteOne{builder}
}

// Query returns a query builder for Ban.
func (c *BanClient) Query() *BanQuery {
	return &BanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBan},
		inters: c.Interceptors(),
	}
}

// Get returns a Ban entity by its id.
func (c *BanClient) Get(ctx context.Context, id int) (*Ban, error) {
	return c.Query().Where(ban.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BanClient) GetX(ctx context.Context, id int) *Ban {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Ban.
func (c *BanClient) QueryUser(b *Ban) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ban.Table, ban.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ban.UserTable, ban.UserColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BanClient) Hooks() []Hook {
	return c.hooks.Ban
}

// Interceptors returns the client interceptors.
func (c *BanClient) Interceptors() []Interceptor {
	return c.inters.Ban
}

func (c *BanClient) mutate(ctx context.Context, m *BanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ban mutation op: %q", m.Op())
	}
}

// EmailClient is a client for the Email schema.
type EmailClient struct {
	config
}

// NewEmailClient returns a client for the Email from the given config.
func NewEmailClient(c config) *EmailClient {
	return &EmailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `email.Hooks(f(g(h())))`.
func (c *EmailClient) Use(hooks ...Hook) {
	c.hooks.Email = append(c.hooks.Email, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `email.Intercept(f(g(h())))`.
func (c *EmailClient) Intercept(interceptors ...Interceptor) {
	c.inters.Email = append(c.inters.Email, interceptors...)
}

// Create returns a builder for creating a Email entity.
func (c *EmailClient) Create() *EmailCreate {
	mutation := newEmailMutation(c.config, OpCreate)
	return &EmailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Email entities.
func (c *EmailClient) CreateBulk(builders ...*EmailCreate) *EmailCreateBulk {
	return &EmailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailClient) MapCreateBulk(slice any, setFunc func(*EmailCreate, int)) *EmailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailCreateBulk{err: fmt.Errorf("calling to EmailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Email.
func (c *EmailClient) Update() *EmailUpdate {
	mutation := newEmailMutation(c.config, OpUpdate)
	return &EmailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailClient) UpdateOne(e *Email) *EmailUpdateOne {
	mutation := newEmailMutation(c.config, OpUpdateOne, withEmail(e))
	return &EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailClient) UpdateOneID(id int) *EmailUpdateOne {
	mutation := newEmailMutation(c.config, OpUpdateOne, withEmailID(id))
	return &EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Email.
func (c *EmailClient) Delete() *EmailDelete {
	mutation := newEmailMutation(c.config, OpDelete)
	return &EmailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailClient) DeleteOne(e *Email) *EmailDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailClient) DeleteOneID(id int) *EmailDeleteOne {
	builder := c.Delete().Where(email.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailDeleteOne{builder}
}

// Query returns a query builder for Email.
func (c *EmailClient) Query() *EmailQuery {
	return &EmailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmail},
		inters: c.Interceptors(),
	}
}

// Get returns a Email entity by its id.
func (c *EmailClient) Get(ctx context.Context, id int) (*Email, error) {
	return c.Query().Where(email.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailClient) GetX(ctx context.Context, id int) *Email {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Email.
func (c *EmailClient) QueryUser(e *Email) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(email.Table, email.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, email.UserTable, email.UserColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailClient) Hooks() []Hook {
	return c.hooks.Email
}

// Interceptors returns the client interceptors.
func (c *EmailClient) Interceptors() []Interceptor {
	return c.inters.Email
}

func (c *EmailClient) mutate(ctx context.Context, m *EmailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Email mutation op: %q", m.Op())
	}
}

// FirstLoginClient is a client for the FirstLogin schema.
type FirstLoginClient struct {
	config
}

// NewFirstLoginClient returns a client for the FirstLogin from the given config.
func NewFirstLoginClient(c config) *FirstLoginClient {
	return &FirstLoginClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `firstlogin.Hooks(f(g(h())))`.
func (c *FirstLoginClient) Use(hooks ...Hook) {
	c.hooks.FirstLogin = append(c.hooks.FirstLogin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `firstlogin.Intercept(f(g(h())))`.
func (c *FirstLoginClient) Intercept(interceptors ...Interceptor) {
	c.inters.FirstLogin = append(c.inters.FirstLogin, interceptors...)
}

// Create returns a builder for creating a FirstLogin entity.
func (c *FirstLoginClient) Create() *FirstLoginCreate {
	mutation := newFirstLoginMutation(c.config, OpCreate)
	return &FirstLoginCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FirstLogin entities.
func (c *FirstLoginClient) CreateBulk(builders ...*FirstLoginCreate) *FirstLoginCreateBulk {
	return &FirstLoginCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FirstLoginClient) MapCreateBulk(slice any, setFunc func(*FirstLoginCreate, int)) *FirstLoginCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FirstLoginCreateBulk{err: fmt.Errorf("calling to FirstLoginClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FirstLoginCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FirstLoginCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FirstLogin.
func (c *FirstLoginClient) Update() *FirstLoginUpdate {
	mutation := newFirstLoginMutation(c.config, OpUpdate)
	return &FirstLoginUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FirstLoginClient) UpdateOne(fl *FirstLogin) *FirstLoginUpdateOne {
	mutation := newFirstLoginMutation(c.config, OpUpdateOne, withFirstLogin(fl))
	return &FirstLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FirstLoginClient) UpdateOneID(id int) *FirstLoginUpdateOne {
	mutation := newFirstLoginMutation(c.config, OpUpdateOne, withFirstLoginID(id))
	return &FirstLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FirstLogin.
func (c *FirstLoginClient) Delete() *FirstLoginDelete {
	mutation := newFirstLoginMutation(c.config, OpDelete)
	return &FirstLoginDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FirstLoginClient) DeleteOne(fl *FirstLogin) *FirstLoginDeleteOne {
	return c.DeleteOneID(fl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FirstLoginClient) DeleteOneID(id int) *FirstLoginDeleteOne {
	builder := c.Delete().Where(firstlogin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FirstLoginDeleteOne{builder}
}

// Query returns a query builder for FirstLogin.
func (c *FirstLoginClient) Query() *FirstLoginQuery {
	return &FirstLoginQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFirstLogin},
		inters: c.Interceptors(),
	}
}

// Get returns a FirstLogin entity by its id.
func (c *FirstLoginClient) Get(ctx context.Context, id int) (*FirstLogin, error) {
	return c.Query().Where(firstlogin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FirstLoginClient) GetX(ctx context.Context, id int) *FirstLogin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a FirstLogin.
func (c *FirstLoginClient) QueryUser(fl *FirstLogin) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(firstlogin.Table, firstlogin.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, firstlogin.UserTable, firstlogin.UserColumn),
		)
		fromV = sqlgraph.Neighbors(fl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FirstLoginClient) Hooks() []Hook {
	return c.hooks.FirstLogin
}

// Interceptors returns the client interceptors.
func (c *FirstLoginClient) Interceptors() []Interceptor {
	return c.inters.FirstLogin
}

func (c *FirstLoginClient) mutate(ctx context.Context, m *FirstLoginMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FirstLoginCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FirstLoginUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FirstLoginUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FirstLoginDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FirstLogin mutation op: %q", m.Op())
	}
}

// LoginAttemptsClient is a client for the LoginAttempts schema.
type LoginAttemptsClient struct {
	config
}

// NewLoginAttemptsClient returns a client for the LoginAttempts from the given config.
func NewLoginAttemptsClient(c config) *LoginAttemptsClient {
	return &LoginAttemptsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loginattempts.Hooks(f(g(h())))`.
func (c *LoginAttemptsClient) Use(hooks ...Hook) {
	c.hooks.LoginAttempts = append(c.hooks.LoginAttempts, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `loginattempts.Intercept(f(g(h())))`.
func (c *LoginAttemptsClient) Intercept(interceptors ...Interceptor) {
	c.inters.LoginAttempts = append(c.inters.LoginAttempts, interceptors...)
}

// Create returns a builder for creating a LoginAttempts entity.
func (c *LoginAttemptsClient) Create() *LoginAttemptsCreate {
	mutation := newLoginAttemptsMutation(c.config, OpCreate)
	return &LoginAttemptsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LoginAttempts entities.
func (c *LoginAttemptsClient) CreateBulk(builders ...*LoginAttemptsCreate) *LoginAttemptsCreateBulk {
	return &LoginAttemptsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LoginAttemptsClient) MapCreateBulk(slice any, setFunc func(*LoginAttemptsCreate, int)) *LoginAttemptsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LoginAttemptsCreateBulk{err: fmt.Errorf("calling to LoginAttemptsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LoginAttemptsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LoginAttemptsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LoginAttempts.
func (c *LoginAttemptsClient) Update() *LoginAttemptsUpdate {
	mutation := newLoginAttemptsMutation(c.config, OpUpdate)
	return &LoginAttemptsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoginAttemptsClient) UpdateOne(la *LoginAttempts) *LoginAttemptsUpdateOne {
	mutation := newLoginAttemptsMutation(c.config, OpUpdateOne, withLoginAttempts(la))
	return &LoginAttemptsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoginAttemptsClient) UpdateOneID(id int) *LoginAttemptsUpdateOne {
	mutation := newLoginAttemptsMutation(c.config, OpUpdateOne, withLoginAttemptsID(id))
	return &LoginAttemptsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LoginAttempts.
func (c *LoginAttemptsClient) Delete() *LoginAttemptsDelete {
	mutation := newLoginAttemptsMutation(c.config, OpDelete)
	return &LoginAttemptsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LoginAttemptsClient) DeleteOne(la *LoginAttempts) *LoginAttemptsDeleteOne {
	return c.DeleteOneID(la.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LoginAttemptsClient) DeleteOneID(id int) *LoginAttemptsDeleteOne {
	builder := c.Delete().Where(loginattempts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoginAttemptsDeleteOne{builder}
}

// Query returns a query builder for LoginAttempts.
func (c *LoginAttemptsClient) Query() *LoginAttemptsQuery {
	return &LoginAttemptsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLoginAttempts},
		inters: c.Interceptors(),
	}
}

// Get returns a LoginAttempts entity by its id.
func (c *LoginAttemptsClient) Get(ctx context.Context, id int) (*LoginAttempts, error) {
	return c.Query().Where(loginattempts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoginAttemptsClient) GetX(ctx context.Context, id int) *LoginAttempts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a LoginAttempts.
func (c *LoginAttemptsClient) QueryUser(la *LoginAttempts) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := la.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(loginattempts.Table, loginattempts.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, loginattempts.UserTable, loginattempts.UserColumn),
		)
		fromV = sqlgraph.Neighbors(la.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LoginAttemptsClient) Hooks() []Hook {
	return c.hooks.LoginAttempts
}

// Interceptors returns the client interceptors.
func (c *LoginAttemptsClient) Interceptors() []Interceptor {
	return c.inters.LoginAttempts
}

func (c *LoginAttemptsClient) mutate(ctx context.Context, m *LoginAttemptsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LoginAttemptsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LoginAttemptsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LoginAttemptsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LoginAttemptsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LoginAttempts mutation op: %q", m.Op())
	}
}

// PasswordClient is a client for the Password schema.
type PasswordClient struct {
	config
}

// NewPasswordClient returns a client for the Password from the given config.
func NewPasswordClient(c config) *PasswordClient {
	return &PasswordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `password.Hooks(f(g(h())))`.
func (c *PasswordClient) Use(hooks ...Hook) {
	c.hooks.Password = append(c.hooks.Password, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `password.Intercept(f(g(h())))`.
func (c *PasswordClient) Intercept(interceptors ...Interceptor) {
	c.inters.Password = append(c.inters.Password, interceptors...)
}

// Create returns a builder for creating a Password entity.
func (c *PasswordClient) Create() *PasswordCreate {
	mutation := newPasswordMutation(c.config, OpCreate)
	return &PasswordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Password entities.
func (c *PasswordClient) CreateBulk(builders ...*PasswordCreate) *PasswordCreateBulk {
	return &PasswordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PasswordClient) MapCreateBulk(slice any, setFunc func(*PasswordCreate, int)) *PasswordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PasswordCreateBulk{err: fmt.Errorf("calling to PasswordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PasswordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PasswordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Password.
func (c *PasswordClient) Update() *PasswordUpdate {
	mutation := newPasswordMutation(c.config, OpUpdate)
	return &PasswordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasswordClient) UpdateOne(pa *Password) *PasswordUpdateOne {
	mutation := newPasswordMutation(c.config, OpUpdateOne, withPassword(pa))
	return &PasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasswordClient) UpdateOneID(id int) *PasswordUpdateOne {
	mutation := newPasswordMutation(c.config, OpUpdateOne, withPasswordID(id))
	return &PasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Password.
func (c *PasswordClient) Delete() *PasswordDelete {
	mutation := newPasswordMutation(c.config, OpDelete)
	return &PasswordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasswordClient) DeleteOne(pa *Password) *PasswordDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasswordClient) DeleteOneID(id int) *PasswordDeleteOne {
	builder := c.Delete().Where(password.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasswordDeleteOne{builder}
}

// Query returns a query builder for Password.
func (c *PasswordClient) Query() *PasswordQuery {
	return &PasswordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePassword},
		inters: c.Interceptors(),
	}
}

// Get returns a Password entity by its id.
func (c *PasswordClient) Get(ctx context.Context, id int) (*Password, error) {
	return c.Query().Where(password.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasswordClient) GetX(ctx context.Context, id int) *Password {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Password.
func (c *PasswordClient) QueryUser(pa *Password) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(password.Table, password.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, password.UserTable, password.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PasswordClient) Hooks() []Hook {
	return c.hooks.Password
}

// Interceptors returns the client interceptors.
func (c *PasswordClient) Interceptors() []Interceptor {
	return c.inters.Password
}

func (c *PasswordClient) mutate(ctx context.Context, m *PasswordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasswordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasswordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasswordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Password mutation op: %q", m.Op())
	}
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `permission.Intercept(f(g(h())))`.
func (c *PermissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Permission = append(c.inters.Permission, interceptors...)
}

// Create returns a builder for creating a Permission entity.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PermissionClient) MapCreateBulk(slice any, setFunc func(*PermissionCreate, int)) *PermissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PermissionCreateBulk{err: fmt.Errorf("calling to PermissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PermissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id int) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionClient) DeleteOneID(id int) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePermission},
		inters: c.Interceptors(),
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id int) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id int) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a Permission.
func (c *PermissionClient) QueryRoles(pe *Permission) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, permission.RolesTable, permission.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleHasPermissions queries the role_has_permissions edge of a Permission.
func (c *PermissionClient) QueryRoleHasPermissions(pe *Permission) *RoleHasPermissionsQuery {
	query := (&RoleHasPermissionsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(rolehaspermissions.Table, rolehaspermissions.PermissionsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, permission.RoleHasPermissionsTable, permission.RoleHasPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	return c.hooks.Permission
}

// Interceptors returns the client interceptors.
func (c *PermissionClient) Interceptors() []Interceptor {
	return c.inters.Permission
}

func (c *PermissionClient) mutate(ctx context.Context, m *PermissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Permission mutation op: %q", m.Op())
	}
}

// PhoneClient is a client for the Phone schema.
type PhoneClient struct {
	config
}

// NewPhoneClient returns a client for the Phone from the given config.
func NewPhoneClient(c config) *PhoneClient {
	return &PhoneClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `phone.Hooks(f(g(h())))`.
func (c *PhoneClient) Use(hooks ...Hook) {
	c.hooks.Phone = append(c.hooks.Phone, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `phone.Intercept(f(g(h())))`.
func (c *PhoneClient) Intercept(interceptors ...Interceptor) {
	c.inters.Phone = append(c.inters.Phone, interceptors...)
}

// Create returns a builder for creating a Phone entity.
func (c *PhoneClient) Create() *PhoneCreate {
	mutation := newPhoneMutation(c.config, OpCreate)
	return &PhoneCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Phone entities.
func (c *PhoneClient) CreateBulk(builders ...*PhoneCreate) *PhoneCreateBulk {
	return &PhoneCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PhoneClient) MapCreateBulk(slice any, setFunc func(*PhoneCreate, int)) *PhoneCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PhoneCreateBulk{err: fmt.Errorf("calling to PhoneClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PhoneCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PhoneCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Phone.
func (c *PhoneClient) Update() *PhoneUpdate {
	mutation := newPhoneMutation(c.config, OpUpdate)
	return &PhoneUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PhoneClient) UpdateOne(ph *Phone) *PhoneUpdateOne {
	mutation := newPhoneMutation(c.config, OpUpdateOne, withPhone(ph))
	return &PhoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PhoneClient) UpdateOneID(id int) *PhoneUpdateOne {
	mutation := newPhoneMutation(c.config, OpUpdateOne, withPhoneID(id))
	return &PhoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Phone.
func (c *PhoneClient) Delete() *PhoneDelete {
	mutation := newPhoneMutation(c.config, OpDelete)
	return &PhoneDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PhoneClient) DeleteOne(ph *Phone) *PhoneDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PhoneClient) DeleteOneID(id int) *PhoneDeleteOne {
	builder := c.Delete().Where(phone.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PhoneDeleteOne{builder}
}

// Query returns a query builder for Phone.
func (c *PhoneClient) Query() *PhoneQuery {
	return &PhoneQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePhone},
		inters: c.Interceptors(),
	}
}

// Get returns a Phone entity by its id.
func (c *PhoneClient) Get(ctx context.Context, id int) (*Phone, error) {
	return c.Query().Where(phone.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PhoneClient) GetX(ctx context.Context, id int) *Phone {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Phone.
func (c *PhoneClient) QueryUser(ph *Phone) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(phone.Table, phone.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, phone.UserTable, phone.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PhoneClient) Hooks() []Hook {
	return c.hooks.Phone
}

// Interceptors returns the client interceptors.
func (c *PhoneClient) Interceptors() []Interceptor {
	return c.inters.Phone
}

func (c *PhoneClient) mutate(ctx context.Context, m *PhoneMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PhoneCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PhoneUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PhoneUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PhoneDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Phone mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleClient) MapCreateBulk(slice any, setFunc func(*RoleCreate, int)) *RoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleCreateBulk{err: fmt.Errorf("calling to RoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id int) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermissions queries the permissions edge of a Role.
func (c *RoleClient) QueryPermissions(r *Role) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, role.PermissionsTable, role.PermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermission queries the permission edge of a Role.
func (c *RoleClient) QueryPermission(r *Role) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.PermissionTable, role.PermissionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleHasPermissions queries the role_has_permissions edge of a Role.
func (c *RoleClient) QueryRoleHasPermissions(r *Role) *RoleHasPermissionsQuery {
	query := (&RoleHasPermissionsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(rolehaspermissions.Table, rolehaspermissions.RolesColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, role.RoleHasPermissionsTable, role.RoleHasPermissionsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserHasRoles queries the user_has_roles edge of a Role.
func (c *RoleClient) QueryUserHasRoles(r *Role) *UserHasRolesQuery {
	query := (&UserHasRolesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(userhasroles.Table, userhasroles.RolesColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, role.UserHasRolesTable, role.UserHasRolesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// RoleHasPermissionsClient is a client for the RoleHasPermissions schema.
type RoleHasPermissionsClient struct {
	config
}

// NewRoleHasPermissionsClient returns a client for the RoleHasPermissions from the given config.
func NewRoleHasPermissionsClient(c config) *RoleHasPermissionsClient {
	return &RoleHasPermissionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rolehaspermissions.Hooks(f(g(h())))`.
func (c *RoleHasPermissionsClient) Use(hooks ...Hook) {
	c.hooks.RoleHasPermissions = append(c.hooks.RoleHasPermissions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rolehaspermissions.Intercept(f(g(h())))`.
func (c *RoleHasPermissionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoleHasPermissions = append(c.inters.RoleHasPermissions, interceptors...)
}

// Create returns a builder for creating a RoleHasPermissions entity.
func (c *RoleHasPermissionsClient) Create() *RoleHasPermissionsCreate {
	mutation := newRoleHasPermissionsMutation(c.config, OpCreate)
	return &RoleHasPermissionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleHasPermissions entities.
func (c *RoleHasPermissionsClient) CreateBulk(builders ...*RoleHasPermissionsCreate) *RoleHasPermissionsCreateBulk {
	return &RoleHasPermissionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleHasPermissionsClient) MapCreateBulk(slice any, setFunc func(*RoleHasPermissionsCreate, int)) *RoleHasPermissionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleHasPermissionsCreateBulk{err: fmt.Errorf("calling to RoleHasPermissionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleHasPermissionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleHasPermissionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleHasPermissions.
func (c *RoleHasPermissionsClient) Update() *RoleHasPermissionsUpdate {
	mutation := newRoleHasPermissionsMutation(c.config, OpUpdate)
	return &RoleHasPermissionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleHasPermissionsClient) UpdateOne(rhp *RoleHasPermissions) *RoleHasPermissionsUpdateOne {
	mutation := newRoleHasPermissionsMutation(c.config, OpUpdateOne)
	mutation.roles = &rhp.RoleID
	mutation.permissions = &rhp.PermissionID
	return &RoleHasPermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleHasPermissions.
func (c *RoleHasPermissionsClient) Delete() *RoleHasPermissionsDelete {
	mutation := newRoleHasPermissionsMutation(c.config, OpDelete)
	return &RoleHasPermissionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for RoleHasPermissions.
func (c *RoleHasPermissionsClient) Query() *RoleHasPermissionsQuery {
	return &RoleHasPermissionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoleHasPermissions},
		inters: c.Interceptors(),
	}
}

// QueryRoles queries the roles edge of a RoleHasPermissions.
func (c *RoleHasPermissionsClient) QueryRoles(rhp *RoleHasPermissions) *RoleQuery {
	return c.Query().
		Where(rolehaspermissions.RoleID(rhp.RoleID), rolehaspermissions.PermissionID(rhp.PermissionID)).
		QueryRoles()
}

// QueryPermissions queries the permissions edge of a RoleHasPermissions.
func (c *RoleHasPermissionsClient) QueryPermissions(rhp *RoleHasPermissions) *PermissionQuery {
	return c.Query().
		Where(rolehaspermissions.RoleID(rhp.RoleID), rolehaspermissions.PermissionID(rhp.PermissionID)).
		QueryPermissions()
}

// Hooks returns the client hooks.
func (c *RoleHasPermissionsClient) Hooks() []Hook {
	return c.hooks.RoleHasPermissions
}

// Interceptors returns the client interceptors.
func (c *RoleHasPermissionsClient) Interceptors() []Interceptor {
	return c.inters.RoleHasPermissions
}

func (c *RoleHasPermissionsClient) mutate(ctx context.Context, m *RoleHasPermissionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleHasPermissionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleHasPermissionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleHasPermissionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleHasPermissionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoleHasPermissions mutation op: %q", m.Op())
	}
}

// ServicesClient is a client for the Services schema.
type ServicesClient struct {
	config
}

// NewServicesClient returns a client for the Services from the given config.
func NewServicesClient(c config) *ServicesClient {
	return &ServicesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `services.Hooks(f(g(h())))`.
func (c *ServicesClient) Use(hooks ...Hook) {
	c.hooks.Services = append(c.hooks.Services, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `services.Intercept(f(g(h())))`.
func (c *ServicesClient) Intercept(interceptors ...Interceptor) {
	c.inters.Services = append(c.inters.Services, interceptors...)
}

// Create returns a builder for creating a Services entity.
func (c *ServicesClient) Create() *ServicesCreate {
	mutation := newServicesMutation(c.config, OpCreate)
	return &ServicesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Services entities.
func (c *ServicesClient) CreateBulk(builders ...*ServicesCreate) *ServicesCreateBulk {
	return &ServicesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ServicesClient) MapCreateBulk(slice any, setFunc func(*ServicesCreate, int)) *ServicesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ServicesCreateBulk{err: fmt.Errorf("calling to ServicesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ServicesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ServicesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Services.
func (c *ServicesClient) Update() *ServicesUpdate {
	mutation := newServicesMutation(c.config, OpUpdate)
	return &ServicesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServicesClient) UpdateOne(s *Services) *ServicesUpdateOne {
	mutation := newServicesMutation(c.config, OpUpdateOne, withServices(s))
	return &ServicesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServicesClient) UpdateOneID(id int) *ServicesUpdateOne {
	mutation := newServicesMutation(c.config, OpUpdateOne, withServicesID(id))
	return &ServicesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Services.
func (c *ServicesClient) Delete() *ServicesDelete {
	mutation := newServicesMutation(c.config, OpDelete)
	return &ServicesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServicesClient) DeleteOne(s *Services) *ServicesDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServicesClient) DeleteOneID(id int) *ServicesDeleteOne {
	builder := c.Delete().Where(services.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServicesDeleteOne{builder}
}

// Query returns a query builder for Services.
func (c *ServicesClient) Query() *ServicesQuery {
	return &ServicesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeServices},
		inters: c.Interceptors(),
	}
}

// Get returns a Services entity by its id.
func (c *ServicesClient) Get(ctx context.Context, id int) (*Services, error) {
	return c.Query().Where(services.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServicesClient) GetX(ctx context.Context, id int) *Services {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermission queries the permission edge of a Services.
func (c *ServicesClient) QueryPermission(s *Services) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(services.Table, services.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, services.PermissionTable, services.PermissionColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServicesClient) Hooks() []Hook {
	return c.hooks.Services
}

// Interceptors returns the client interceptors.
func (c *ServicesClient) Interceptors() []Interceptor {
	return c.inters.Services
}

func (c *ServicesClient) mutate(ctx context.Context, m *ServicesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServicesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServicesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServicesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServicesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Services mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmails queries the emails edge of a User.
func (c *UserClient) QueryEmails(u *User) *EmailQuery {
	query := (&EmailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(email.Table, email.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EmailsTable, user.EmailsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasswords queries the passwords edge of a User.
func (c *UserClient) QueryPasswords(u *User) *PasswordQuery {
	query := (&PasswordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(password.Table, password.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PasswordsTable, user.PasswordsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhones queries the phones edge of a User.
func (c *UserClient) QueryPhones(u *User) *PhoneQuery {
	query := (&PhoneClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(phone.Table, phone.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PhonesTable, user.PhonesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBan queries the ban edge of a User.
func (c *UserClient) QueryBan(u *User) *BanQuery {
	query := (&BanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ban.Table, ban.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BanTable, user.BanColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFirstLogin queries the first_login edge of a User.
func (c *UserClient) QueryFirstLogin(u *User) *FirstLoginQuery {
	query := (&FirstLoginClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(firstlogin.Table, firstlogin.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FirstLoginTable, user.FirstLoginColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLoginAttempts queries the login_attempts edge of a User.
func (c *UserClient) QueryLoginAttempts(u *User) *LoginAttemptsQuery {
	query := (&LoginAttemptsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(loginattempts.Table, loginattempts.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LoginAttemptsTable, user.LoginAttemptsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a User.
func (c *UserClient) QueryRoles(u *User) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.RolesTable, user.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserHasRoles queries the user_has_roles edge of a User.
func (c *UserClient) QueryUserHasRoles(u *User) *UserHasRolesQuery {
	query := (&UserHasRolesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userhasroles.Table, userhasroles.UsersColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserHasRolesTable, user.UserHasRolesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserHasRolesClient is a client for the UserHasRoles schema.
type UserHasRolesClient struct {
	config
}

// NewUserHasRolesClient returns a client for the UserHasRoles from the given config.
func NewUserHasRolesClient(c config) *UserHasRolesClient {
	return &UserHasRolesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userhasroles.Hooks(f(g(h())))`.
func (c *UserHasRolesClient) Use(hooks ...Hook) {
	c.hooks.UserHasRoles = append(c.hooks.UserHasRoles, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userhasroles.Intercept(f(g(h())))`.
func (c *UserHasRolesClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserHasRoles = append(c.inters.UserHasRoles, interceptors...)
}

// Create returns a builder for creating a UserHasRoles entity.
func (c *UserHasRolesClient) Create() *UserHasRolesCreate {
	mutation := newUserHasRolesMutation(c.config, OpCreate)
	return &UserHasRolesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserHasRoles entities.
func (c *UserHasRolesClient) CreateBulk(builders ...*UserHasRolesCreate) *UserHasRolesCreateBulk {
	return &UserHasRolesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserHasRolesClient) MapCreateBulk(slice any, setFunc func(*UserHasRolesCreate, int)) *UserHasRolesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserHasRolesCreateBulk{err: fmt.Errorf("calling to UserHasRolesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserHasRolesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserHasRolesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserHasRoles.
func (c *UserHasRolesClient) Update() *UserHasRolesUpdate {
	mutation := newUserHasRolesMutation(c.config, OpUpdate)
	return &UserHasRolesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserHasRolesClient) UpdateOne(uhr *UserHasRoles) *UserHasRolesUpdateOne {
	mutation := newUserHasRolesMutation(c.config, OpUpdateOne)
	mutation.users = &uhr.UserID
	mutation.roles = &uhr.RoleID
	return &UserHasRolesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserHasRoles.
func (c *UserHasRolesClient) Delete() *UserHasRolesDelete {
	mutation := newUserHasRolesMutation(c.config, OpDelete)
	return &UserHasRolesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserHasRoles.
func (c *UserHasRolesClient) Query() *UserHasRolesQuery {
	return &UserHasRolesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserHasRoles},
		inters: c.Interceptors(),
	}
}

// QueryUsers queries the users edge of a UserHasRoles.
func (c *UserHasRolesClient) QueryUsers(uhr *UserHasRoles) *UserQuery {
	return c.Query().
		Where(userhasroles.UserID(uhr.UserID), userhasroles.RoleID(uhr.RoleID)).
		QueryUsers()
}

// QueryRoles queries the roles edge of a UserHasRoles.
func (c *UserHasRolesClient) QueryRoles(uhr *UserHasRoles) *RoleQuery {
	return c.Query().
		Where(userhasroles.UserID(uhr.UserID), userhasroles.RoleID(uhr.RoleID)).
		QueryRoles()
}

// Hooks returns the client hooks.
func (c *UserHasRolesClient) Hooks() []Hook {
	return c.hooks.UserHasRoles
}

// Interceptors returns the client interceptors.
func (c *UserHasRolesClient) Interceptors() []Interceptor {
	return c.inters.UserHasRoles
}

func (c *UserHasRolesClient) mutate(ctx context.Context, m *UserHasRolesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserHasRolesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserHasRolesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserHasRolesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserHasRolesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserHasRoles mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Ban, Email, FirstLogin, LoginAttempts, Password, Permission, Phone, Role,
		RoleHasPermissions, Services, User, UserHasRoles []ent.Hook
	}
	inters struct {
		Ban, Email, FirstLogin, LoginAttempts, Password, Permission, Phone, Role,
		RoleHasPermissions, Services, User, UserHasRoles []ent.Interceptor
	}
)
