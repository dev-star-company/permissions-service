// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"permission-service/internal/app/ent"
	"permission-service/internal/app/ent/ban"
	"permission-service/internal/app/ent/email"
	"permission-service/internal/app/ent/firstlogin"
	"permission-service/internal/app/ent/loginattempts"
	"permission-service/internal/app/ent/password"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/phone"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/rolehaspermissions"
	"permission-service/internal/app/ent/services"
	"permission-service/internal/app/ent/user"
	"permission-service/internal/app/ent/userhasroles"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The BanFunc type is an adapter to allow the use of ordinary function as a Querier.
type BanFunc func(context.Context, *ent.BanQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BanFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BanQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BanQuery", q)
}

// The TraverseBan type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBan func(context.Context, *ent.BanQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBan) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBan) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BanQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BanQuery", q)
}

// The EmailFunc type is an adapter to allow the use of ordinary function as a Querier.
type EmailFunc func(context.Context, *ent.EmailQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EmailFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EmailQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EmailQuery", q)
}

// The TraverseEmail type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEmail func(context.Context, *ent.EmailQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEmail) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEmail) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmailQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EmailQuery", q)
}

// The FirstLoginFunc type is an adapter to allow the use of ordinary function as a Querier.
type FirstLoginFunc func(context.Context, *ent.FirstLoginQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FirstLoginFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FirstLoginQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FirstLoginQuery", q)
}

// The TraverseFirstLogin type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFirstLogin func(context.Context, *ent.FirstLoginQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFirstLogin) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFirstLogin) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FirstLoginQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FirstLoginQuery", q)
}

// The LoginAttemptsFunc type is an adapter to allow the use of ordinary function as a Querier.
type LoginAttemptsFunc func(context.Context, *ent.LoginAttemptsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f LoginAttemptsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.LoginAttemptsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.LoginAttemptsQuery", q)
}

// The TraverseLoginAttempts type is an adapter to allow the use of ordinary function as Traverser.
type TraverseLoginAttempts func(context.Context, *ent.LoginAttemptsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseLoginAttempts) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseLoginAttempts) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LoginAttemptsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.LoginAttemptsQuery", q)
}

// The PasswordFunc type is an adapter to allow the use of ordinary function as a Querier.
type PasswordFunc func(context.Context, *ent.PasswordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PasswordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PasswordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PasswordQuery", q)
}

// The TraversePassword type is an adapter to allow the use of ordinary function as Traverser.
type TraversePassword func(context.Context, *ent.PasswordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePassword) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePassword) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PasswordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PasswordQuery", q)
}

// The PermissionFunc type is an adapter to allow the use of ordinary function as a Querier.
type PermissionFunc func(context.Context, *ent.PermissionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PermissionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The TraversePermission type is an adapter to allow the use of ordinary function as Traverser.
type TraversePermission func(context.Context, *ent.PermissionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePermission) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePermission) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PermissionQuery", q)
}

// The PhoneFunc type is an adapter to allow the use of ordinary function as a Querier.
type PhoneFunc func(context.Context, *ent.PhoneQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PhoneFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PhoneQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PhoneQuery", q)
}

// The TraversePhone type is an adapter to allow the use of ordinary function as Traverser.
type TraversePhone func(context.Context, *ent.PhoneQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePhone) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePhone) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PhoneQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PhoneQuery", q)
}

// The RoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleFunc func(context.Context, *ent.RoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The TraverseRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRole func(context.Context, *ent.RoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoleQuery", q)
}

// The RoleHasPermissionsFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoleHasPermissionsFunc func(context.Context, *ent.RoleHasPermissionsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoleHasPermissionsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoleHasPermissionsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoleHasPermissionsQuery", q)
}

// The TraverseRoleHasPermissions type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRoleHasPermissions func(context.Context, *ent.RoleHasPermissionsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRoleHasPermissions) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRoleHasPermissions) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleHasPermissionsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoleHasPermissionsQuery", q)
}

// The ServicesFunc type is an adapter to allow the use of ordinary function as a Querier.
type ServicesFunc func(context.Context, *ent.ServicesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ServicesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ServicesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ServicesQuery", q)
}

// The TraverseServices type is an adapter to allow the use of ordinary function as Traverser.
type TraverseServices func(context.Context, *ent.ServicesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseServices) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseServices) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServicesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ServicesQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserHasRolesFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserHasRolesFunc func(context.Context, *ent.UserHasRolesQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserHasRolesFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserHasRolesQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserHasRolesQuery", q)
}

// The TraverseUserHasRoles type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserHasRoles func(context.Context, *ent.UserHasRolesQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserHasRoles) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserHasRoles) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserHasRolesQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserHasRolesQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.BanQuery:
		return &query[*ent.BanQuery, predicate.Ban, ban.OrderOption]{typ: ent.TypeBan, tq: q}, nil
	case *ent.EmailQuery:
		return &query[*ent.EmailQuery, predicate.Email, email.OrderOption]{typ: ent.TypeEmail, tq: q}, nil
	case *ent.FirstLoginQuery:
		return &query[*ent.FirstLoginQuery, predicate.FirstLogin, firstlogin.OrderOption]{typ: ent.TypeFirstLogin, tq: q}, nil
	case *ent.LoginAttemptsQuery:
		return &query[*ent.LoginAttemptsQuery, predicate.LoginAttempts, loginattempts.OrderOption]{typ: ent.TypeLoginAttempts, tq: q}, nil
	case *ent.PasswordQuery:
		return &query[*ent.PasswordQuery, predicate.Password, password.OrderOption]{typ: ent.TypePassword, tq: q}, nil
	case *ent.PermissionQuery:
		return &query[*ent.PermissionQuery, predicate.Permission, permission.OrderOption]{typ: ent.TypePermission, tq: q}, nil
	case *ent.PhoneQuery:
		return &query[*ent.PhoneQuery, predicate.Phone, phone.OrderOption]{typ: ent.TypePhone, tq: q}, nil
	case *ent.RoleQuery:
		return &query[*ent.RoleQuery, predicate.Role, role.OrderOption]{typ: ent.TypeRole, tq: q}, nil
	case *ent.RoleHasPermissionsQuery:
		return &query[*ent.RoleHasPermissionsQuery, predicate.RoleHasPermissions, rolehaspermissions.OrderOption]{typ: ent.TypeRoleHasPermissions, tq: q}, nil
	case *ent.ServicesQuery:
		return &query[*ent.ServicesQuery, predicate.Services, services.OrderOption]{typ: ent.TypeServices, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserHasRolesQuery:
		return &query[*ent.UserHasRolesQuery, predicate.UserHasRoles, userhasroles.OrderOption]{typ: ent.TypeUserHasRoles, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
