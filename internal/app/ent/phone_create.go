// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/phone"
	"permission-service/internal/app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhoneCreate is the builder for creating a Phone entity.
type PhoneCreate struct {
	config
	mutation *PhoneMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PhoneCreate) SetCreatedAt(t time.Time) *PhoneCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PhoneCreate) SetNillableCreatedAt(t *time.Time) *PhoneCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PhoneCreate) SetUpdatedAt(t time.Time) *PhoneCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PhoneCreate) SetNillableUpdatedAt(t *time.Time) *PhoneCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PhoneCreate) SetDeletedAt(t time.Time) *PhoneCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PhoneCreate) SetNillableDeletedAt(t *time.Time) *PhoneCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetCreatedBy sets the "created_by" field.
func (pc *PhoneCreate) SetCreatedBy(i int) *PhoneCreate {
	pc.mutation.SetCreatedBy(i)
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PhoneCreate) SetUpdatedBy(i int) *PhoneCreate {
	pc.mutation.SetUpdatedBy(i)
	return pc
}

// SetDeletedBy sets the "deleted_by" field.
func (pc *PhoneCreate) SetDeletedBy(i int) *PhoneCreate {
	pc.mutation.SetDeletedBy(i)
	return pc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pc *PhoneCreate) SetNillableDeletedBy(i *int) *PhoneCreate {
	if i != nil {
		pc.SetDeletedBy(*i)
	}
	return pc
}

// SetPhone sets the "phone" field.
func (pc *PhoneCreate) SetPhone(s string) *PhoneCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *PhoneCreate) SetUserID(i int) *PhoneCreate {
	pc.mutation.SetUserID(i)
	return pc
}

// SetMain sets the "main" field.
func (pc *PhoneCreate) SetMain(b bool) *PhoneCreate {
	pc.mutation.SetMain(b)
	return pc
}

// SetNillableMain sets the "main" field if the given value is not nil.
func (pc *PhoneCreate) SetNillableMain(b *bool) *PhoneCreate {
	if b != nil {
		pc.SetMain(*b)
	}
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *PhoneCreate) SetUser(u *User) *PhoneCreate {
	return pc.SetUserID(u.ID)
}

// Mutation returns the PhoneMutation object of the builder.
func (pc *PhoneCreate) Mutation() *PhoneMutation {
	return pc.mutation
}

// Save creates the Phone in the database.
func (pc *PhoneCreate) Save(ctx context.Context) (*Phone, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PhoneCreate) SaveX(ctx context.Context) *Phone {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PhoneCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PhoneCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PhoneCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := phone.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := phone.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Main(); !ok {
		v := phone.DefaultMain
		pc.mutation.SetMain(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PhoneCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Phone.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Phone.updated_at"`)}
	}
	if _, ok := pc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Phone.created_by"`)}
	}
	if v, ok := pc.mutation.CreatedBy(); ok {
		if err := phone.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Phone.created_by": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Phone.updated_by"`)}
	}
	if v, ok := pc.mutation.UpdatedBy(); ok {
		if err := phone.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Phone.updated_by": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Phone.phone"`)}
	}
	if v, ok := pc.mutation.Phone(); ok {
		if err := phone.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Phone.phone": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Phone.user_id"`)}
	}
	if _, ok := pc.mutation.Main(); !ok {
		return &ValidationError{Name: "main", err: errors.New(`ent: missing required field "Phone.main"`)}
	}
	if len(pc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Phone.user"`)}
	}
	return nil
}

func (pc *PhoneCreate) sqlSave(ctx context.Context) (*Phone, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PhoneCreate) createSpec() (*Phone, *sqlgraph.CreateSpec) {
	var (
		_node = &Phone{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(phone.Table, sqlgraph.NewFieldSpec(phone.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(phone.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(phone.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(phone.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(phone.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(phone.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.DeletedBy(); ok {
		_spec.SetField(phone.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(phone.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pc.mutation.Main(); ok {
		_spec.SetField(phone.FieldMain, field.TypeBool, value)
		_node.Main = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phone.UserTable,
			Columns: []string{phone.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PhoneCreateBulk is the builder for creating many Phone entities in bulk.
type PhoneCreateBulk struct {
	config
	err      error
	builders []*PhoneCreate
}

// Save creates the Phone entities in the database.
func (pcb *PhoneCreateBulk) Save(ctx context.Context) ([]*Phone, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Phone, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhoneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PhoneCreateBulk) SaveX(ctx context.Context) []*Phone {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PhoneCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PhoneCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
