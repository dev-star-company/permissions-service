// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/user"
	"permission-service/internal/app/ent/userhasroles"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserHasRoles is the model entity for the UserHasRoles schema.
type UserHasRoles struct {
	config `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserHasRolesQuery when eager-loading is set.
	Edges        UserHasRolesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserHasRolesEdges holds the relations/edges for other nodes in the graph.
type UserHasRolesEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// Roles holds the value of the roles edge.
	Roles *Role `json:"roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserHasRolesEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserHasRolesEdges) RolesOrErr() (*Role, error) {
	if e.Roles != nil {
		return e.Roles, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserHasRoles) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userhasroles.FieldCreatedBy, userhasroles.FieldUpdatedBy, userhasroles.FieldDeletedBy, userhasroles.FieldUserID, userhasroles.FieldRoleID:
			values[i] = new(sql.NullInt64)
		case userhasroles.FieldCreatedAt, userhasroles.FieldUpdatedAt, userhasroles.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserHasRoles fields.
func (uhr *UserHasRoles) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userhasroles.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uhr.CreatedAt = value.Time
			}
		case userhasroles.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uhr.UpdatedAt = value.Time
			}
		case userhasroles.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				uhr.DeletedAt = new(time.Time)
				*uhr.DeletedAt = value.Time
			}
		case userhasroles.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				uhr.CreatedBy = int(value.Int64)
			}
		case userhasroles.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				uhr.UpdatedBy = int(value.Int64)
			}
		case userhasroles.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				uhr.DeletedBy = new(int)
				*uhr.DeletedBy = int(value.Int64)
			}
		case userhasroles.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uhr.UserID = int(value.Int64)
			}
		case userhasroles.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				uhr.RoleID = int(value.Int64)
			}
		default:
			uhr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserHasRoles.
// This includes values selected through modifiers, order, etc.
func (uhr *UserHasRoles) Value(name string) (ent.Value, error) {
	return uhr.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the UserHasRoles entity.
func (uhr *UserHasRoles) QueryUsers() *UserQuery {
	return NewUserHasRolesClient(uhr.config).QueryUsers(uhr)
}

// QueryRoles queries the "roles" edge of the UserHasRoles entity.
func (uhr *UserHasRoles) QueryRoles() *RoleQuery {
	return NewUserHasRolesClient(uhr.config).QueryRoles(uhr)
}

// Update returns a builder for updating this UserHasRoles.
// Note that you need to call UserHasRoles.Unwrap() before calling this method if this UserHasRoles
// was returned from a transaction, and the transaction was committed or rolled back.
func (uhr *UserHasRoles) Update() *UserHasRolesUpdateOne {
	return NewUserHasRolesClient(uhr.config).UpdateOne(uhr)
}

// Unwrap unwraps the UserHasRoles entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uhr *UserHasRoles) Unwrap() *UserHasRoles {
	_tx, ok := uhr.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserHasRoles is not a transactional entity")
	}
	uhr.config.driver = _tx.drv
	return uhr
}

// String implements the fmt.Stringer.
func (uhr *UserHasRoles) String() string {
	var builder strings.Builder
	builder.WriteString("UserHasRoles(")
	builder.WriteString("created_at=")
	builder.WriteString(uhr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uhr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := uhr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", uhr.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", uhr.UpdatedBy))
	builder.WriteString(", ")
	if v := uhr.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uhr.UserID))
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", uhr.RoleID))
	builder.WriteByte(')')
	return builder.String()
}

// UserHasRolesSlice is a parsable slice of UserHasRoles.
type UserHasRolesSlice []*UserHasRoles
