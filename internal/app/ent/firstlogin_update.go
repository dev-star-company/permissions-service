// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/firstlogin"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FirstLoginUpdate is the builder for updating FirstLogin entities.
type FirstLoginUpdate struct {
	config
	hooks    []Hook
	mutation *FirstLoginMutation
}

// Where appends a list predicates to the FirstLoginUpdate builder.
func (flu *FirstLoginUpdate) Where(ps ...predicate.FirstLogin) *FirstLoginUpdate {
	flu.mutation.Where(ps...)
	return flu
}

// SetUpdatedAt sets the "updated_at" field.
func (flu *FirstLoginUpdate) SetUpdatedAt(t time.Time) *FirstLoginUpdate {
	flu.mutation.SetUpdatedAt(t)
	return flu
}

// SetDeletedAt sets the "deleted_at" field.
func (flu *FirstLoginUpdate) SetDeletedAt(t time.Time) *FirstLoginUpdate {
	flu.mutation.SetDeletedAt(t)
	return flu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (flu *FirstLoginUpdate) SetNillableDeletedAt(t *time.Time) *FirstLoginUpdate {
	if t != nil {
		flu.SetDeletedAt(*t)
	}
	return flu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (flu *FirstLoginUpdate) ClearDeletedAt() *FirstLoginUpdate {
	flu.mutation.ClearDeletedAt()
	return flu
}

// SetUpdatedBy sets the "updated_by" field.
func (flu *FirstLoginUpdate) SetUpdatedBy(i int) *FirstLoginUpdate {
	flu.mutation.ResetUpdatedBy()
	flu.mutation.SetUpdatedBy(i)
	return flu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (flu *FirstLoginUpdate) SetNillableUpdatedBy(i *int) *FirstLoginUpdate {
	if i != nil {
		flu.SetUpdatedBy(*i)
	}
	return flu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (flu *FirstLoginUpdate) AddUpdatedBy(i int) *FirstLoginUpdate {
	flu.mutation.AddUpdatedBy(i)
	return flu
}

// SetDeletedBy sets the "deleted_by" field.
func (flu *FirstLoginUpdate) SetDeletedBy(i int) *FirstLoginUpdate {
	flu.mutation.ResetDeletedBy()
	flu.mutation.SetDeletedBy(i)
	return flu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (flu *FirstLoginUpdate) SetNillableDeletedBy(i *int) *FirstLoginUpdate {
	if i != nil {
		flu.SetDeletedBy(*i)
	}
	return flu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (flu *FirstLoginUpdate) AddDeletedBy(i int) *FirstLoginUpdate {
	flu.mutation.AddDeletedBy(i)
	return flu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (flu *FirstLoginUpdate) ClearDeletedBy() *FirstLoginUpdate {
	flu.mutation.ClearDeletedBy()
	return flu
}

// SetUserID sets the "user_id" field.
func (flu *FirstLoginUpdate) SetUserID(i int) *FirstLoginUpdate {
	flu.mutation.SetUserID(i)
	return flu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (flu *FirstLoginUpdate) SetNillableUserID(i *int) *FirstLoginUpdate {
	if i != nil {
		flu.SetUserID(*i)
	}
	return flu
}

// SetSuccessful sets the "successful" field.
func (flu *FirstLoginUpdate) SetSuccessful(b bool) *FirstLoginUpdate {
	flu.mutation.SetSuccessful(b)
	return flu
}

// SetNillableSuccessful sets the "successful" field if the given value is not nil.
func (flu *FirstLoginUpdate) SetNillableSuccessful(b *bool) *FirstLoginUpdate {
	if b != nil {
		flu.SetSuccessful(*b)
	}
	return flu
}

// SetUser sets the "user" edge to the User entity.
func (flu *FirstLoginUpdate) SetUser(u *User) *FirstLoginUpdate {
	return flu.SetUserID(u.ID)
}

// Mutation returns the FirstLoginMutation object of the builder.
func (flu *FirstLoginUpdate) Mutation() *FirstLoginMutation {
	return flu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (flu *FirstLoginUpdate) ClearUser() *FirstLoginUpdate {
	flu.mutation.ClearUser()
	return flu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (flu *FirstLoginUpdate) Save(ctx context.Context) (int, error) {
	if err := flu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, flu.sqlSave, flu.mutation, flu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (flu *FirstLoginUpdate) SaveX(ctx context.Context) int {
	affected, err := flu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (flu *FirstLoginUpdate) Exec(ctx context.Context) error {
	_, err := flu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (flu *FirstLoginUpdate) ExecX(ctx context.Context) {
	if err := flu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (flu *FirstLoginUpdate) defaults() error {
	if _, ok := flu.mutation.UpdatedAt(); !ok {
		if firstlogin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized firstlogin.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := firstlogin.UpdateDefaultUpdatedAt()
		flu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (flu *FirstLoginUpdate) check() error {
	if v, ok := flu.mutation.UpdatedBy(); ok {
		if err := firstlogin.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "FirstLogin.updated_by": %w`, err)}
		}
	}
	if flu.mutation.UserCleared() && len(flu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FirstLogin.user"`)
	}
	return nil
}

func (flu *FirstLoginUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := flu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(firstlogin.Table, firstlogin.Columns, sqlgraph.NewFieldSpec(firstlogin.FieldID, field.TypeInt))
	if ps := flu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := flu.mutation.UpdatedAt(); ok {
		_spec.SetField(firstlogin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := flu.mutation.DeletedAt(); ok {
		_spec.SetField(firstlogin.FieldDeletedAt, field.TypeTime, value)
	}
	if flu.mutation.DeletedAtCleared() {
		_spec.ClearField(firstlogin.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := flu.mutation.UpdatedBy(); ok {
		_spec.SetField(firstlogin.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := flu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(firstlogin.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := flu.mutation.DeletedBy(); ok {
		_spec.SetField(firstlogin.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := flu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(firstlogin.FieldDeletedBy, field.TypeInt, value)
	}
	if flu.mutation.DeletedByCleared() {
		_spec.ClearField(firstlogin.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := flu.mutation.Successful(); ok {
		_spec.SetField(firstlogin.FieldSuccessful, field.TypeBool, value)
	}
	if flu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firstlogin.UserTable,
			Columns: []string{firstlogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := flu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firstlogin.UserTable,
			Columns: []string{firstlogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, flu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{firstlogin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	flu.mutation.done = true
	return n, nil
}

// FirstLoginUpdateOne is the builder for updating a single FirstLogin entity.
type FirstLoginUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FirstLoginMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fluo *FirstLoginUpdateOne) SetUpdatedAt(t time.Time) *FirstLoginUpdateOne {
	fluo.mutation.SetUpdatedAt(t)
	return fluo
}

// SetDeletedAt sets the "deleted_at" field.
func (fluo *FirstLoginUpdateOne) SetDeletedAt(t time.Time) *FirstLoginUpdateOne {
	fluo.mutation.SetDeletedAt(t)
	return fluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fluo *FirstLoginUpdateOne) SetNillableDeletedAt(t *time.Time) *FirstLoginUpdateOne {
	if t != nil {
		fluo.SetDeletedAt(*t)
	}
	return fluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fluo *FirstLoginUpdateOne) ClearDeletedAt() *FirstLoginUpdateOne {
	fluo.mutation.ClearDeletedAt()
	return fluo
}

// SetUpdatedBy sets the "updated_by" field.
func (fluo *FirstLoginUpdateOne) SetUpdatedBy(i int) *FirstLoginUpdateOne {
	fluo.mutation.ResetUpdatedBy()
	fluo.mutation.SetUpdatedBy(i)
	return fluo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fluo *FirstLoginUpdateOne) SetNillableUpdatedBy(i *int) *FirstLoginUpdateOne {
	if i != nil {
		fluo.SetUpdatedBy(*i)
	}
	return fluo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fluo *FirstLoginUpdateOne) AddUpdatedBy(i int) *FirstLoginUpdateOne {
	fluo.mutation.AddUpdatedBy(i)
	return fluo
}

// SetDeletedBy sets the "deleted_by" field.
func (fluo *FirstLoginUpdateOne) SetDeletedBy(i int) *FirstLoginUpdateOne {
	fluo.mutation.ResetDeletedBy()
	fluo.mutation.SetDeletedBy(i)
	return fluo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fluo *FirstLoginUpdateOne) SetNillableDeletedBy(i *int) *FirstLoginUpdateOne {
	if i != nil {
		fluo.SetDeletedBy(*i)
	}
	return fluo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (fluo *FirstLoginUpdateOne) AddDeletedBy(i int) *FirstLoginUpdateOne {
	fluo.mutation.AddDeletedBy(i)
	return fluo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fluo *FirstLoginUpdateOne) ClearDeletedBy() *FirstLoginUpdateOne {
	fluo.mutation.ClearDeletedBy()
	return fluo
}

// SetUserID sets the "user_id" field.
func (fluo *FirstLoginUpdateOne) SetUserID(i int) *FirstLoginUpdateOne {
	fluo.mutation.SetUserID(i)
	return fluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fluo *FirstLoginUpdateOne) SetNillableUserID(i *int) *FirstLoginUpdateOne {
	if i != nil {
		fluo.SetUserID(*i)
	}
	return fluo
}

// SetSuccessful sets the "successful" field.
func (fluo *FirstLoginUpdateOne) SetSuccessful(b bool) *FirstLoginUpdateOne {
	fluo.mutation.SetSuccessful(b)
	return fluo
}

// SetNillableSuccessful sets the "successful" field if the given value is not nil.
func (fluo *FirstLoginUpdateOne) SetNillableSuccessful(b *bool) *FirstLoginUpdateOne {
	if b != nil {
		fluo.SetSuccessful(*b)
	}
	return fluo
}

// SetUser sets the "user" edge to the User entity.
func (fluo *FirstLoginUpdateOne) SetUser(u *User) *FirstLoginUpdateOne {
	return fluo.SetUserID(u.ID)
}

// Mutation returns the FirstLoginMutation object of the builder.
func (fluo *FirstLoginUpdateOne) Mutation() *FirstLoginMutation {
	return fluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (fluo *FirstLoginUpdateOne) ClearUser() *FirstLoginUpdateOne {
	fluo.mutation.ClearUser()
	return fluo
}

// Where appends a list predicates to the FirstLoginUpdate builder.
func (fluo *FirstLoginUpdateOne) Where(ps ...predicate.FirstLogin) *FirstLoginUpdateOne {
	fluo.mutation.Where(ps...)
	return fluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fluo *FirstLoginUpdateOne) Select(field string, fields ...string) *FirstLoginUpdateOne {
	fluo.fields = append([]string{field}, fields...)
	return fluo
}

// Save executes the query and returns the updated FirstLogin entity.
func (fluo *FirstLoginUpdateOne) Save(ctx context.Context) (*FirstLogin, error) {
	if err := fluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fluo.sqlSave, fluo.mutation, fluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fluo *FirstLoginUpdateOne) SaveX(ctx context.Context) *FirstLogin {
	node, err := fluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fluo *FirstLoginUpdateOne) Exec(ctx context.Context) error {
	_, err := fluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fluo *FirstLoginUpdateOne) ExecX(ctx context.Context) {
	if err := fluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fluo *FirstLoginUpdateOne) defaults() error {
	if _, ok := fluo.mutation.UpdatedAt(); !ok {
		if firstlogin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized firstlogin.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := firstlogin.UpdateDefaultUpdatedAt()
		fluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fluo *FirstLoginUpdateOne) check() error {
	if v, ok := fluo.mutation.UpdatedBy(); ok {
		if err := firstlogin.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "FirstLogin.updated_by": %w`, err)}
		}
	}
	if fluo.mutation.UserCleared() && len(fluo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FirstLogin.user"`)
	}
	return nil
}

func (fluo *FirstLoginUpdateOne) sqlSave(ctx context.Context) (_node *FirstLogin, err error) {
	if err := fluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(firstlogin.Table, firstlogin.Columns, sqlgraph.NewFieldSpec(firstlogin.FieldID, field.TypeInt))
	id, ok := fluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FirstLogin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, firstlogin.FieldID)
		for _, f := range fields {
			if !firstlogin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != firstlogin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fluo.mutation.UpdatedAt(); ok {
		_spec.SetField(firstlogin.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fluo.mutation.DeletedAt(); ok {
		_spec.SetField(firstlogin.FieldDeletedAt, field.TypeTime, value)
	}
	if fluo.mutation.DeletedAtCleared() {
		_spec.ClearField(firstlogin.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fluo.mutation.UpdatedBy(); ok {
		_spec.SetField(firstlogin.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fluo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(firstlogin.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fluo.mutation.DeletedBy(); ok {
		_spec.SetField(firstlogin.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := fluo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(firstlogin.FieldDeletedBy, field.TypeInt, value)
	}
	if fluo.mutation.DeletedByCleared() {
		_spec.ClearField(firstlogin.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := fluo.mutation.Successful(); ok {
		_spec.SetField(firstlogin.FieldSuccessful, field.TypeBool, value)
	}
	if fluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firstlogin.UserTable,
			Columns: []string{firstlogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   firstlogin.UserTable,
			Columns: []string{firstlogin.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FirstLogin{config: fluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{firstlogin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fluo.mutation.done = true
	return _node, nil
}
