// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/user"
	"permission-service/internal/app/ent/userhasroles"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserHasRolesUpdate is the builder for updating UserHasRoles entities.
type UserHasRolesUpdate struct {
	config
	hooks    []Hook
	mutation *UserHasRolesMutation
}

// Where appends a list predicates to the UserHasRolesUpdate builder.
func (uhru *UserHasRolesUpdate) Where(ps ...predicate.UserHasRoles) *UserHasRolesUpdate {
	uhru.mutation.Where(ps...)
	return uhru
}

// SetUpdatedAt sets the "updated_at" field.
func (uhru *UserHasRolesUpdate) SetUpdatedAt(t time.Time) *UserHasRolesUpdate {
	uhru.mutation.SetUpdatedAt(t)
	return uhru
}

// SetDeletedAt sets the "deleted_at" field.
func (uhru *UserHasRolesUpdate) SetDeletedAt(t time.Time) *UserHasRolesUpdate {
	uhru.mutation.SetDeletedAt(t)
	return uhru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uhru *UserHasRolesUpdate) SetNillableDeletedAt(t *time.Time) *UserHasRolesUpdate {
	if t != nil {
		uhru.SetDeletedAt(*t)
	}
	return uhru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uhru *UserHasRolesUpdate) ClearDeletedAt() *UserHasRolesUpdate {
	uhru.mutation.ClearDeletedAt()
	return uhru
}

// SetUpdatedBy sets the "updated_by" field.
func (uhru *UserHasRolesUpdate) SetUpdatedBy(i int) *UserHasRolesUpdate {
	uhru.mutation.ResetUpdatedBy()
	uhru.mutation.SetUpdatedBy(i)
	return uhru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uhru *UserHasRolesUpdate) SetNillableUpdatedBy(i *int) *UserHasRolesUpdate {
	if i != nil {
		uhru.SetUpdatedBy(*i)
	}
	return uhru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uhru *UserHasRolesUpdate) AddUpdatedBy(i int) *UserHasRolesUpdate {
	uhru.mutation.AddUpdatedBy(i)
	return uhru
}

// SetDeletedBy sets the "deleted_by" field.
func (uhru *UserHasRolesUpdate) SetDeletedBy(i int) *UserHasRolesUpdate {
	uhru.mutation.ResetDeletedBy()
	uhru.mutation.SetDeletedBy(i)
	return uhru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uhru *UserHasRolesUpdate) SetNillableDeletedBy(i *int) *UserHasRolesUpdate {
	if i != nil {
		uhru.SetDeletedBy(*i)
	}
	return uhru
}

// AddDeletedBy adds i to the "deleted_by" field.
func (uhru *UserHasRolesUpdate) AddDeletedBy(i int) *UserHasRolesUpdate {
	uhru.mutation.AddDeletedBy(i)
	return uhru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uhru *UserHasRolesUpdate) ClearDeletedBy() *UserHasRolesUpdate {
	uhru.mutation.ClearDeletedBy()
	return uhru
}

// SetUserID sets the "user_id" field.
func (uhru *UserHasRolesUpdate) SetUserID(i int) *UserHasRolesUpdate {
	uhru.mutation.SetUserID(i)
	return uhru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uhru *UserHasRolesUpdate) SetNillableUserID(i *int) *UserHasRolesUpdate {
	if i != nil {
		uhru.SetUserID(*i)
	}
	return uhru
}

// SetRoleID sets the "role_id" field.
func (uhru *UserHasRolesUpdate) SetRoleID(i int) *UserHasRolesUpdate {
	uhru.mutation.SetRoleID(i)
	return uhru
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uhru *UserHasRolesUpdate) SetNillableRoleID(i *int) *UserHasRolesUpdate {
	if i != nil {
		uhru.SetRoleID(*i)
	}
	return uhru
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (uhru *UserHasRolesUpdate) SetUsersID(id int) *UserHasRolesUpdate {
	uhru.mutation.SetUsersID(id)
	return uhru
}

// SetUsers sets the "users" edge to the User entity.
func (uhru *UserHasRolesUpdate) SetUsers(u *User) *UserHasRolesUpdate {
	return uhru.SetUsersID(u.ID)
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (uhru *UserHasRolesUpdate) SetRolesID(id int) *UserHasRolesUpdate {
	uhru.mutation.SetRolesID(id)
	return uhru
}

// SetRoles sets the "roles" edge to the Role entity.
func (uhru *UserHasRolesUpdate) SetRoles(r *Role) *UserHasRolesUpdate {
	return uhru.SetRolesID(r.ID)
}

// Mutation returns the UserHasRolesMutation object of the builder.
func (uhru *UserHasRolesUpdate) Mutation() *UserHasRolesMutation {
	return uhru.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (uhru *UserHasRolesUpdate) ClearUsers() *UserHasRolesUpdate {
	uhru.mutation.ClearUsers()
	return uhru
}

// ClearRoles clears the "roles" edge to the Role entity.
func (uhru *UserHasRolesUpdate) ClearRoles() *UserHasRolesUpdate {
	uhru.mutation.ClearRoles()
	return uhru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uhru *UserHasRolesUpdate) Save(ctx context.Context) (int, error) {
	uhru.defaults()
	return withHooks(ctx, uhru.sqlSave, uhru.mutation, uhru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uhru *UserHasRolesUpdate) SaveX(ctx context.Context) int {
	affected, err := uhru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uhru *UserHasRolesUpdate) Exec(ctx context.Context) error {
	_, err := uhru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhru *UserHasRolesUpdate) ExecX(ctx context.Context) {
	if err := uhru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhru *UserHasRolesUpdate) defaults() {
	if _, ok := uhru.mutation.UpdatedAt(); !ok {
		v := userhasroles.UpdateDefaultUpdatedAt()
		uhru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhru *UserHasRolesUpdate) check() error {
	if v, ok := uhru.mutation.UpdatedBy(); ok {
		if err := userhasroles.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.updated_by": %w`, err)}
		}
	}
	if v, ok := uhru.mutation.UserID(); ok {
		if err := userhasroles.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.user_id": %w`, err)}
		}
	}
	if v, ok := uhru.mutation.RoleID(); ok {
		if err := userhasroles.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.role_id": %w`, err)}
		}
	}
	if uhru.mutation.UsersCleared() && len(uhru.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserHasRoles.users"`)
	}
	if uhru.mutation.RolesCleared() && len(uhru.mutation.RolesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserHasRoles.roles"`)
	}
	return nil
}

func (uhru *UserHasRolesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uhru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userhasroles.Table, userhasroles.Columns, sqlgraph.NewFieldSpec(userhasroles.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(userhasroles.FieldRoleID, field.TypeInt))
	if ps := uhru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uhru.mutation.UpdatedAt(); ok {
		_spec.SetField(userhasroles.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uhru.mutation.DeletedAt(); ok {
		_spec.SetField(userhasroles.FieldDeletedAt, field.TypeTime, value)
	}
	if uhru.mutation.DeletedAtCleared() {
		_spec.ClearField(userhasroles.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uhru.mutation.UpdatedBy(); ok {
		_spec.SetField(userhasroles.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uhru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(userhasroles.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uhru.mutation.DeletedBy(); ok {
		_spec.SetField(userhasroles.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := uhru.mutation.AddedDeletedBy(); ok {
		_spec.AddField(userhasroles.FieldDeletedBy, field.TypeInt, value)
	}
	if uhru.mutation.DeletedByCleared() {
		_spec.ClearField(userhasroles.FieldDeletedBy, field.TypeInt)
	}
	if uhru.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.UsersTable,
			Columns: []string{userhasroles.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uhru.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.UsersTable,
			Columns: []string{userhasroles.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uhru.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.RolesTable,
			Columns: []string{userhasroles.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uhru.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.RolesTable,
			Columns: []string{userhasroles.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uhru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userhasroles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uhru.mutation.done = true
	return n, nil
}

// UserHasRolesUpdateOne is the builder for updating a single UserHasRoles entity.
type UserHasRolesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserHasRolesMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uhruo *UserHasRolesUpdateOne) SetUpdatedAt(t time.Time) *UserHasRolesUpdateOne {
	uhruo.mutation.SetUpdatedAt(t)
	return uhruo
}

// SetDeletedAt sets the "deleted_at" field.
func (uhruo *UserHasRolesUpdateOne) SetDeletedAt(t time.Time) *UserHasRolesUpdateOne {
	uhruo.mutation.SetDeletedAt(t)
	return uhruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uhruo *UserHasRolesUpdateOne) SetNillableDeletedAt(t *time.Time) *UserHasRolesUpdateOne {
	if t != nil {
		uhruo.SetDeletedAt(*t)
	}
	return uhruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uhruo *UserHasRolesUpdateOne) ClearDeletedAt() *UserHasRolesUpdateOne {
	uhruo.mutation.ClearDeletedAt()
	return uhruo
}

// SetUpdatedBy sets the "updated_by" field.
func (uhruo *UserHasRolesUpdateOne) SetUpdatedBy(i int) *UserHasRolesUpdateOne {
	uhruo.mutation.ResetUpdatedBy()
	uhruo.mutation.SetUpdatedBy(i)
	return uhruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uhruo *UserHasRolesUpdateOne) SetNillableUpdatedBy(i *int) *UserHasRolesUpdateOne {
	if i != nil {
		uhruo.SetUpdatedBy(*i)
	}
	return uhruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (uhruo *UserHasRolesUpdateOne) AddUpdatedBy(i int) *UserHasRolesUpdateOne {
	uhruo.mutation.AddUpdatedBy(i)
	return uhruo
}

// SetDeletedBy sets the "deleted_by" field.
func (uhruo *UserHasRolesUpdateOne) SetDeletedBy(i int) *UserHasRolesUpdateOne {
	uhruo.mutation.ResetDeletedBy()
	uhruo.mutation.SetDeletedBy(i)
	return uhruo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uhruo *UserHasRolesUpdateOne) SetNillableDeletedBy(i *int) *UserHasRolesUpdateOne {
	if i != nil {
		uhruo.SetDeletedBy(*i)
	}
	return uhruo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (uhruo *UserHasRolesUpdateOne) AddDeletedBy(i int) *UserHasRolesUpdateOne {
	uhruo.mutation.AddDeletedBy(i)
	return uhruo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uhruo *UserHasRolesUpdateOne) ClearDeletedBy() *UserHasRolesUpdateOne {
	uhruo.mutation.ClearDeletedBy()
	return uhruo
}

// SetUserID sets the "user_id" field.
func (uhruo *UserHasRolesUpdateOne) SetUserID(i int) *UserHasRolesUpdateOne {
	uhruo.mutation.SetUserID(i)
	return uhruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uhruo *UserHasRolesUpdateOne) SetNillableUserID(i *int) *UserHasRolesUpdateOne {
	if i != nil {
		uhruo.SetUserID(*i)
	}
	return uhruo
}

// SetRoleID sets the "role_id" field.
func (uhruo *UserHasRolesUpdateOne) SetRoleID(i int) *UserHasRolesUpdateOne {
	uhruo.mutation.SetRoleID(i)
	return uhruo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uhruo *UserHasRolesUpdateOne) SetNillableRoleID(i *int) *UserHasRolesUpdateOne {
	if i != nil {
		uhruo.SetRoleID(*i)
	}
	return uhruo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (uhruo *UserHasRolesUpdateOne) SetUsersID(id int) *UserHasRolesUpdateOne {
	uhruo.mutation.SetUsersID(id)
	return uhruo
}

// SetUsers sets the "users" edge to the User entity.
func (uhruo *UserHasRolesUpdateOne) SetUsers(u *User) *UserHasRolesUpdateOne {
	return uhruo.SetUsersID(u.ID)
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (uhruo *UserHasRolesUpdateOne) SetRolesID(id int) *UserHasRolesUpdateOne {
	uhruo.mutation.SetRolesID(id)
	return uhruo
}

// SetRoles sets the "roles" edge to the Role entity.
func (uhruo *UserHasRolesUpdateOne) SetRoles(r *Role) *UserHasRolesUpdateOne {
	return uhruo.SetRolesID(r.ID)
}

// Mutation returns the UserHasRolesMutation object of the builder.
func (uhruo *UserHasRolesUpdateOne) Mutation() *UserHasRolesMutation {
	return uhruo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (uhruo *UserHasRolesUpdateOne) ClearUsers() *UserHasRolesUpdateOne {
	uhruo.mutation.ClearUsers()
	return uhruo
}

// ClearRoles clears the "roles" edge to the Role entity.
func (uhruo *UserHasRolesUpdateOne) ClearRoles() *UserHasRolesUpdateOne {
	uhruo.mutation.ClearRoles()
	return uhruo
}

// Where appends a list predicates to the UserHasRolesUpdate builder.
func (uhruo *UserHasRolesUpdateOne) Where(ps ...predicate.UserHasRoles) *UserHasRolesUpdateOne {
	uhruo.mutation.Where(ps...)
	return uhruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uhruo *UserHasRolesUpdateOne) Select(field string, fields ...string) *UserHasRolesUpdateOne {
	uhruo.fields = append([]string{field}, fields...)
	return uhruo
}

// Save executes the query and returns the updated UserHasRoles entity.
func (uhruo *UserHasRolesUpdateOne) Save(ctx context.Context) (*UserHasRoles, error) {
	uhruo.defaults()
	return withHooks(ctx, uhruo.sqlSave, uhruo.mutation, uhruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uhruo *UserHasRolesUpdateOne) SaveX(ctx context.Context) *UserHasRoles {
	node, err := uhruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uhruo *UserHasRolesUpdateOne) Exec(ctx context.Context) error {
	_, err := uhruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhruo *UserHasRolesUpdateOne) ExecX(ctx context.Context) {
	if err := uhruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhruo *UserHasRolesUpdateOne) defaults() {
	if _, ok := uhruo.mutation.UpdatedAt(); !ok {
		v := userhasroles.UpdateDefaultUpdatedAt()
		uhruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhruo *UserHasRolesUpdateOne) check() error {
	if v, ok := uhruo.mutation.UpdatedBy(); ok {
		if err := userhasroles.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.updated_by": %w`, err)}
		}
	}
	if v, ok := uhruo.mutation.UserID(); ok {
		if err := userhasroles.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.user_id": %w`, err)}
		}
	}
	if v, ok := uhruo.mutation.RoleID(); ok {
		if err := userhasroles.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.role_id": %w`, err)}
		}
	}
	if uhruo.mutation.UsersCleared() && len(uhruo.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserHasRoles.users"`)
	}
	if uhruo.mutation.RolesCleared() && len(uhruo.mutation.RolesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserHasRoles.roles"`)
	}
	return nil
}

func (uhruo *UserHasRolesUpdateOne) sqlSave(ctx context.Context) (_node *UserHasRoles, err error) {
	if err := uhruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userhasroles.Table, userhasroles.Columns, sqlgraph.NewFieldSpec(userhasroles.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(userhasroles.FieldRoleID, field.TypeInt))
	if id, ok := uhruo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "UserHasRoles.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := uhruo.mutation.RoleID(); !ok {
		return nil, &ValidationError{Name: "role_id", err: errors.New(`ent: missing "UserHasRoles.role_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := uhruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !userhasroles.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := uhruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uhruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userhasroles.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uhruo.mutation.DeletedAt(); ok {
		_spec.SetField(userhasroles.FieldDeletedAt, field.TypeTime, value)
	}
	if uhruo.mutation.DeletedAtCleared() {
		_spec.ClearField(userhasroles.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uhruo.mutation.UpdatedBy(); ok {
		_spec.SetField(userhasroles.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uhruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(userhasroles.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := uhruo.mutation.DeletedBy(); ok {
		_spec.SetField(userhasroles.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := uhruo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(userhasroles.FieldDeletedBy, field.TypeInt, value)
	}
	if uhruo.mutation.DeletedByCleared() {
		_spec.ClearField(userhasroles.FieldDeletedBy, field.TypeInt)
	}
	if uhruo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.UsersTable,
			Columns: []string{userhasroles.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uhruo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.UsersTable,
			Columns: []string{userhasroles.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uhruo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.RolesTable,
			Columns: []string{userhasroles.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uhruo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.RolesTable,
			Columns: []string{userhasroles.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserHasRoles{config: uhruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uhruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userhasroles.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uhruo.mutation.done = true
	return _node, nil
}
