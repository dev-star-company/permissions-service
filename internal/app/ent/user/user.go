// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// EdgeEmails holds the string denoting the emails edge name in mutations.
	EdgeEmails = "emails"
	// EdgePasswords holds the string denoting the passwords edge name in mutations.
	EdgePasswords = "passwords"
	// EdgePhones holds the string denoting the phones edge name in mutations.
	EdgePhones = "phones"
	// EdgeBan holds the string denoting the ban edge name in mutations.
	EdgeBan = "ban"
	// EdgeFirstLogin holds the string denoting the first_login edge name in mutations.
	EdgeFirstLogin = "first_login"
	// EdgeLoginAttempts holds the string denoting the login_attempts edge name in mutations.
	EdgeLoginAttempts = "login_attempts"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// EdgeUserHasRoles holds the string denoting the user_has_roles edge name in mutations.
	EdgeUserHasRoles = "user_has_roles"
	// Table holds the table name of the user in the database.
	Table = "users"
	// EmailsTable is the table that holds the emails relation/edge.
	EmailsTable = "emails"
	// EmailsInverseTable is the table name for the Email entity.
	// It exists in this package in order to avoid circular dependency with the "email" package.
	EmailsInverseTable = "emails"
	// EmailsColumn is the table column denoting the emails relation/edge.
	EmailsColumn = "user_id"
	// PasswordsTable is the table that holds the passwords relation/edge.
	PasswordsTable = "passwords"
	// PasswordsInverseTable is the table name for the Password entity.
	// It exists in this package in order to avoid circular dependency with the "password" package.
	PasswordsInverseTable = "passwords"
	// PasswordsColumn is the table column denoting the passwords relation/edge.
	PasswordsColumn = "user_id"
	// PhonesTable is the table that holds the phones relation/edge.
	PhonesTable = "phones"
	// PhonesInverseTable is the table name for the Phone entity.
	// It exists in this package in order to avoid circular dependency with the "phone" package.
	PhonesInverseTable = "phones"
	// PhonesColumn is the table column denoting the phones relation/edge.
	PhonesColumn = "user_id"
	// BanTable is the table that holds the ban relation/edge.
	BanTable = "bans"
	// BanInverseTable is the table name for the Ban entity.
	// It exists in this package in order to avoid circular dependency with the "ban" package.
	BanInverseTable = "bans"
	// BanColumn is the table column denoting the ban relation/edge.
	BanColumn = "user_id"
	// FirstLoginTable is the table that holds the first_login relation/edge.
	FirstLoginTable = "first_logins"
	// FirstLoginInverseTable is the table name for the FirstLogin entity.
	// It exists in this package in order to avoid circular dependency with the "firstlogin" package.
	FirstLoginInverseTable = "first_logins"
	// FirstLoginColumn is the table column denoting the first_login relation/edge.
	FirstLoginColumn = "user_id"
	// LoginAttemptsTable is the table that holds the login_attempts relation/edge.
	LoginAttemptsTable = "login_attempts"
	// LoginAttemptsInverseTable is the table name for the LoginAttempts entity.
	// It exists in this package in order to avoid circular dependency with the "loginattempts" package.
	LoginAttemptsInverseTable = "login_attempts"
	// LoginAttemptsColumn is the table column denoting the login_attempts relation/edge.
	LoginAttemptsColumn = "user_id"
	// RolesTable is the table that holds the roles relation/edge. The primary key declared below.
	RolesTable = "user_has_roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// UserHasRolesTable is the table that holds the user_has_roles relation/edge.
	UserHasRolesTable = "user_has_roles"
	// UserHasRolesInverseTable is the table name for the UserHasRoles entity.
	// It exists in this package in order to avoid circular dependency with the "userhasroles" package.
	UserHasRolesInverseTable = "user_has_roles"
	// UserHasRolesColumn is the table column denoting the user_has_roles relation/edge.
	UserHasRolesColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedBy,
	FieldName,
	FieldSurname,
}

var (
	// RolesPrimaryKey and RolesColumn2 are the table columns denoting the
	// primary key for the roles relation (M2M).
	RolesPrimaryKey = []string{"user_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(int) error
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(int) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SurnameValidator is a validator for the "Surname" field. It is called by the builders before save.
	SurnameValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySurname orders the results by the Surname field.
func BySurname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSurname, opts...).ToFunc()
}

// ByEmailsCount orders the results by emails count.
func ByEmailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmailsStep(), opts...)
	}
}

// ByEmails orders the results by emails terms.
func ByEmails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPasswordsCount orders the results by passwords count.
func ByPasswordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPasswordsStep(), opts...)
	}
}

// ByPasswords orders the results by passwords terms.
func ByPasswords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPasswordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPhonesCount orders the results by phones count.
func ByPhonesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPhonesStep(), opts...)
	}
}

// ByPhones orders the results by phones terms.
func ByPhones(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPhonesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBanCount orders the results by ban count.
func ByBanCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBanStep(), opts...)
	}
}

// ByBan orders the results by ban terms.
func ByBan(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBanStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFirstLoginCount orders the results by first_login count.
func ByFirstLoginCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFirstLoginStep(), opts...)
	}
}

// ByFirstLogin orders the results by first_login terms.
func ByFirstLogin(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFirstLoginStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLoginAttemptsCount orders the results by login_attempts count.
func ByLoginAttemptsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLoginAttemptsStep(), opts...)
	}
}

// ByLoginAttempts orders the results by login_attempts terms.
func ByLoginAttempts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoginAttemptsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserHasRolesCount orders the results by user_has_roles count.
func ByUserHasRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserHasRolesStep(), opts...)
	}
}

// ByUserHasRoles orders the results by user_has_roles terms.
func ByUserHasRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserHasRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEmailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EmailsTable, EmailsColumn),
	)
}
func newPasswordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PasswordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PasswordsTable, PasswordsColumn),
	)
}
func newPhonesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PhonesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PhonesTable, PhonesColumn),
	)
}
func newBanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BanTable, BanColumn),
	)
}
func newFirstLoginStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FirstLoginInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FirstLoginTable, FirstLoginColumn),
	)
}
func newLoginAttemptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoginAttemptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LoginAttemptsTable, LoginAttemptsColumn),
	)
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
	)
}
func newUserHasRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserHasRolesInverseTable, UserHasRolesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserHasRolesTable, UserHasRolesColumn),
	)
}
