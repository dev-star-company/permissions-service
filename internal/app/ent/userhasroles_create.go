// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/user"
	"permission-service/internal/app/ent/userhasroles"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserHasRolesCreate is the builder for creating a UserHasRoles entity.
type UserHasRolesCreate struct {
	config
	mutation *UserHasRolesMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uhrc *UserHasRolesCreate) SetCreatedAt(t time.Time) *UserHasRolesCreate {
	uhrc.mutation.SetCreatedAt(t)
	return uhrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uhrc *UserHasRolesCreate) SetNillableCreatedAt(t *time.Time) *UserHasRolesCreate {
	if t != nil {
		uhrc.SetCreatedAt(*t)
	}
	return uhrc
}

// SetUpdatedAt sets the "updated_at" field.
func (uhrc *UserHasRolesCreate) SetUpdatedAt(t time.Time) *UserHasRolesCreate {
	uhrc.mutation.SetUpdatedAt(t)
	return uhrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uhrc *UserHasRolesCreate) SetNillableUpdatedAt(t *time.Time) *UserHasRolesCreate {
	if t != nil {
		uhrc.SetUpdatedAt(*t)
	}
	return uhrc
}

// SetDeletedAt sets the "deleted_at" field.
func (uhrc *UserHasRolesCreate) SetDeletedAt(t time.Time) *UserHasRolesCreate {
	uhrc.mutation.SetDeletedAt(t)
	return uhrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uhrc *UserHasRolesCreate) SetNillableDeletedAt(t *time.Time) *UserHasRolesCreate {
	if t != nil {
		uhrc.SetDeletedAt(*t)
	}
	return uhrc
}

// SetCreatedBy sets the "created_by" field.
func (uhrc *UserHasRolesCreate) SetCreatedBy(i int) *UserHasRolesCreate {
	uhrc.mutation.SetCreatedBy(i)
	return uhrc
}

// SetUpdatedBy sets the "updated_by" field.
func (uhrc *UserHasRolesCreate) SetUpdatedBy(i int) *UserHasRolesCreate {
	uhrc.mutation.SetUpdatedBy(i)
	return uhrc
}

// SetDeletedBy sets the "deleted_by" field.
func (uhrc *UserHasRolesCreate) SetDeletedBy(i int) *UserHasRolesCreate {
	uhrc.mutation.SetDeletedBy(i)
	return uhrc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uhrc *UserHasRolesCreate) SetNillableDeletedBy(i *int) *UserHasRolesCreate {
	if i != nil {
		uhrc.SetDeletedBy(*i)
	}
	return uhrc
}

// SetUserID sets the "user_id" field.
func (uhrc *UserHasRolesCreate) SetUserID(i int) *UserHasRolesCreate {
	uhrc.mutation.SetUserID(i)
	return uhrc
}

// SetRoleID sets the "role_id" field.
func (uhrc *UserHasRolesCreate) SetRoleID(i int) *UserHasRolesCreate {
	uhrc.mutation.SetRoleID(i)
	return uhrc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (uhrc *UserHasRolesCreate) SetUsersID(id int) *UserHasRolesCreate {
	uhrc.mutation.SetUsersID(id)
	return uhrc
}

// SetUsers sets the "users" edge to the User entity.
func (uhrc *UserHasRolesCreate) SetUsers(u *User) *UserHasRolesCreate {
	return uhrc.SetUsersID(u.ID)
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (uhrc *UserHasRolesCreate) SetRolesID(id int) *UserHasRolesCreate {
	uhrc.mutation.SetRolesID(id)
	return uhrc
}

// SetRoles sets the "roles" edge to the Role entity.
func (uhrc *UserHasRolesCreate) SetRoles(r *Role) *UserHasRolesCreate {
	return uhrc.SetRolesID(r.ID)
}

// Mutation returns the UserHasRolesMutation object of the builder.
func (uhrc *UserHasRolesCreate) Mutation() *UserHasRolesMutation {
	return uhrc.mutation
}

// Save creates the UserHasRoles in the database.
func (uhrc *UserHasRolesCreate) Save(ctx context.Context) (*UserHasRoles, error) {
	uhrc.defaults()
	return withHooks(ctx, uhrc.sqlSave, uhrc.mutation, uhrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uhrc *UserHasRolesCreate) SaveX(ctx context.Context) *UserHasRoles {
	v, err := uhrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uhrc *UserHasRolesCreate) Exec(ctx context.Context) error {
	_, err := uhrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhrc *UserHasRolesCreate) ExecX(ctx context.Context) {
	if err := uhrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uhrc *UserHasRolesCreate) defaults() {
	if _, ok := uhrc.mutation.CreatedAt(); !ok {
		v := userhasroles.DefaultCreatedAt()
		uhrc.mutation.SetCreatedAt(v)
	}
	if _, ok := uhrc.mutation.UpdatedAt(); !ok {
		v := userhasroles.DefaultUpdatedAt()
		uhrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uhrc *UserHasRolesCreate) check() error {
	if _, ok := uhrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserHasRoles.created_at"`)}
	}
	if _, ok := uhrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserHasRoles.updated_at"`)}
	}
	if _, ok := uhrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "UserHasRoles.created_by"`)}
	}
	if v, ok := uhrc.mutation.CreatedBy(); ok {
		if err := userhasroles.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.created_by": %w`, err)}
		}
	}
	if _, ok := uhrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "UserHasRoles.updated_by"`)}
	}
	if v, ok := uhrc.mutation.UpdatedBy(); ok {
		if err := userhasroles.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.updated_by": %w`, err)}
		}
	}
	if _, ok := uhrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserHasRoles.user_id"`)}
	}
	if v, ok := uhrc.mutation.UserID(); ok {
		if err := userhasroles.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.user_id": %w`, err)}
		}
	}
	if _, ok := uhrc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "UserHasRoles.role_id"`)}
	}
	if v, ok := uhrc.mutation.RoleID(); ok {
		if err := userhasroles.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "UserHasRoles.role_id": %w`, err)}
		}
	}
	if len(uhrc.mutation.UsersIDs()) == 0 {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "UserHasRoles.users"`)}
	}
	if len(uhrc.mutation.RolesIDs()) == 0 {
		return &ValidationError{Name: "roles", err: errors.New(`ent: missing required edge "UserHasRoles.roles"`)}
	}
	return nil
}

func (uhrc *UserHasRolesCreate) sqlSave(ctx context.Context) (*UserHasRoles, error) {
	if err := uhrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uhrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uhrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (uhrc *UserHasRolesCreate) createSpec() (*UserHasRoles, *sqlgraph.CreateSpec) {
	var (
		_node = &UserHasRoles{config: uhrc.config}
		_spec = sqlgraph.NewCreateSpec(userhasroles.Table, nil)
	)
	if value, ok := uhrc.mutation.CreatedAt(); ok {
		_spec.SetField(userhasroles.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uhrc.mutation.UpdatedAt(); ok {
		_spec.SetField(userhasroles.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uhrc.mutation.DeletedAt(); ok {
		_spec.SetField(userhasroles.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := uhrc.mutation.CreatedBy(); ok {
		_spec.SetField(userhasroles.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := uhrc.mutation.UpdatedBy(); ok {
		_spec.SetField(userhasroles.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := uhrc.mutation.DeletedBy(); ok {
		_spec.SetField(userhasroles.FieldDeletedBy, field.TypeInt, value)
		_node.DeletedBy = &value
	}
	if nodes := uhrc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.UsersTable,
			Columns: []string{userhasroles.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uhrc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userhasroles.RolesTable,
			Columns: []string{userhasroles.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserHasRolesCreateBulk is the builder for creating many UserHasRoles entities in bulk.
type UserHasRolesCreateBulk struct {
	config
	err      error
	builders []*UserHasRolesCreate
}

// Save creates the UserHasRoles entities in the database.
func (uhrcb *UserHasRolesCreateBulk) Save(ctx context.Context) ([]*UserHasRoles, error) {
	if uhrcb.err != nil {
		return nil, uhrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uhrcb.builders))
	nodes := make([]*UserHasRoles, len(uhrcb.builders))
	mutators := make([]Mutator, len(uhrcb.builders))
	for i := range uhrcb.builders {
		func(i int, root context.Context) {
			builder := uhrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserHasRolesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uhrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uhrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uhrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uhrcb *UserHasRolesCreateBulk) SaveX(ctx context.Context) []*UserHasRoles {
	v, err := uhrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uhrcb *UserHasRolesCreateBulk) Exec(ctx context.Context) error {
	_, err := uhrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uhrcb *UserHasRolesCreateBulk) ExecX(ctx context.Context) {
	if err := uhrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
