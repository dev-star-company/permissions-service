// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/user"
	"permission-service/internal/app/ent/userhasroles"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserHasRolesQuery is the builder for querying UserHasRoles entities.
type UserHasRolesQuery struct {
	config
	ctx        *QueryContext
	order      []userhasroles.OrderOption
	inters     []Interceptor
	predicates []predicate.UserHasRoles
	withUsers  *UserQuery
	withRoles  *RoleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserHasRolesQuery builder.
func (uhrq *UserHasRolesQuery) Where(ps ...predicate.UserHasRoles) *UserHasRolesQuery {
	uhrq.predicates = append(uhrq.predicates, ps...)
	return uhrq
}

// Limit the number of records to be returned by this query.
func (uhrq *UserHasRolesQuery) Limit(limit int) *UserHasRolesQuery {
	uhrq.ctx.Limit = &limit
	return uhrq
}

// Offset to start from.
func (uhrq *UserHasRolesQuery) Offset(offset int) *UserHasRolesQuery {
	uhrq.ctx.Offset = &offset
	return uhrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uhrq *UserHasRolesQuery) Unique(unique bool) *UserHasRolesQuery {
	uhrq.ctx.Unique = &unique
	return uhrq
}

// Order specifies how the records should be ordered.
func (uhrq *UserHasRolesQuery) Order(o ...userhasroles.OrderOption) *UserHasRolesQuery {
	uhrq.order = append(uhrq.order, o...)
	return uhrq
}

// QueryUsers chains the current query on the "users" edge.
func (uhrq *UserHasRolesQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: uhrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uhrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uhrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userhasroles.Table, userhasroles.UsersColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userhasroles.UsersTable, userhasroles.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uhrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoles chains the current query on the "roles" edge.
func (uhrq *UserHasRolesQuery) QueryRoles() *RoleQuery {
	query := (&RoleClient{config: uhrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uhrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uhrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userhasroles.Table, userhasroles.RolesColumn, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userhasroles.RolesTable, userhasroles.RolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uhrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserHasRoles entity from the query.
// Returns a *NotFoundError when no UserHasRoles was found.
func (uhrq *UserHasRolesQuery) First(ctx context.Context) (*UserHasRoles, error) {
	nodes, err := uhrq.Limit(1).All(setContextOp(ctx, uhrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userhasroles.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uhrq *UserHasRolesQuery) FirstX(ctx context.Context) *UserHasRoles {
	node, err := uhrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single UserHasRoles entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserHasRoles entity is found.
// Returns a *NotFoundError when no UserHasRoles entities are found.
func (uhrq *UserHasRolesQuery) Only(ctx context.Context) (*UserHasRoles, error) {
	nodes, err := uhrq.Limit(2).All(setContextOp(ctx, uhrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userhasroles.Label}
	default:
		return nil, &NotSingularError{userhasroles.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uhrq *UserHasRolesQuery) OnlyX(ctx context.Context) *UserHasRoles {
	node, err := uhrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of UserHasRolesSlice.
func (uhrq *UserHasRolesQuery) All(ctx context.Context) ([]*UserHasRoles, error) {
	ctx = setContextOp(ctx, uhrq.ctx, ent.OpQueryAll)
	if err := uhrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserHasRoles, *UserHasRolesQuery]()
	return withInterceptors[[]*UserHasRoles](ctx, uhrq, qr, uhrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uhrq *UserHasRolesQuery) AllX(ctx context.Context) []*UserHasRoles {
	nodes, err := uhrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (uhrq *UserHasRolesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uhrq.ctx, ent.OpQueryCount)
	if err := uhrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uhrq, querierCount[*UserHasRolesQuery](), uhrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uhrq *UserHasRolesQuery) CountX(ctx context.Context) int {
	count, err := uhrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uhrq *UserHasRolesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uhrq.ctx, ent.OpQueryExist)
	switch _, err := uhrq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uhrq *UserHasRolesQuery) ExistX(ctx context.Context) bool {
	exist, err := uhrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserHasRolesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uhrq *UserHasRolesQuery) Clone() *UserHasRolesQuery {
	if uhrq == nil {
		return nil
	}
	return &UserHasRolesQuery{
		config:     uhrq.config,
		ctx:        uhrq.ctx.Clone(),
		order:      append([]userhasroles.OrderOption{}, uhrq.order...),
		inters:     append([]Interceptor{}, uhrq.inters...),
		predicates: append([]predicate.UserHasRoles{}, uhrq.predicates...),
		withUsers:  uhrq.withUsers.Clone(),
		withRoles:  uhrq.withRoles.Clone(),
		// clone intermediate query.
		sql:  uhrq.sql.Clone(),
		path: uhrq.path,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (uhrq *UserHasRolesQuery) WithUsers(opts ...func(*UserQuery)) *UserHasRolesQuery {
	query := (&UserClient{config: uhrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uhrq.withUsers = query
	return uhrq
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (uhrq *UserHasRolesQuery) WithRoles(opts ...func(*RoleQuery)) *UserHasRolesQuery {
	query := (&RoleClient{config: uhrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uhrq.withRoles = query
	return uhrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserHasRoles.Query().
//		GroupBy(userhasroles.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uhrq *UserHasRolesQuery) GroupBy(field string, fields ...string) *UserHasRolesGroupBy {
	uhrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserHasRolesGroupBy{build: uhrq}
	grbuild.flds = &uhrq.ctx.Fields
	grbuild.label = userhasroles.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.UserHasRoles.Query().
//		Select(userhasroles.FieldCreatedAt).
//		Scan(ctx, &v)
func (uhrq *UserHasRolesQuery) Select(fields ...string) *UserHasRolesSelect {
	uhrq.ctx.Fields = append(uhrq.ctx.Fields, fields...)
	sbuild := &UserHasRolesSelect{UserHasRolesQuery: uhrq}
	sbuild.label = userhasroles.Label
	sbuild.flds, sbuild.scan = &uhrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserHasRolesSelect configured with the given aggregations.
func (uhrq *UserHasRolesQuery) Aggregate(fns ...AggregateFunc) *UserHasRolesSelect {
	return uhrq.Select().Aggregate(fns...)
}

func (uhrq *UserHasRolesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uhrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uhrq); err != nil {
				return err
			}
		}
	}
	for _, f := range uhrq.ctx.Fields {
		if !userhasroles.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uhrq.path != nil {
		prev, err := uhrq.path(ctx)
		if err != nil {
			return err
		}
		uhrq.sql = prev
	}
	return nil
}

func (uhrq *UserHasRolesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserHasRoles, error) {
	var (
		nodes       = []*UserHasRoles{}
		_spec       = uhrq.querySpec()
		loadedTypes = [2]bool{
			uhrq.withUsers != nil,
			uhrq.withRoles != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserHasRoles).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserHasRoles{config: uhrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uhrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uhrq.withUsers; query != nil {
		if err := uhrq.loadUsers(ctx, query, nodes, nil,
			func(n *UserHasRoles, e *User) { n.Edges.Users = e }); err != nil {
			return nil, err
		}
	}
	if query := uhrq.withRoles; query != nil {
		if err := uhrq.loadRoles(ctx, query, nodes, nil,
			func(n *UserHasRoles, e *Role) { n.Edges.Roles = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uhrq *UserHasRolesQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*UserHasRoles, init func(*UserHasRoles), assign func(*UserHasRoles, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserHasRoles)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uhrq *UserHasRolesQuery) loadRoles(ctx context.Context, query *RoleQuery, nodes []*UserHasRoles, init func(*UserHasRoles), assign func(*UserHasRoles, *Role)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserHasRoles)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (uhrq *UserHasRolesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uhrq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, uhrq.driver, _spec)
}

func (uhrq *UserHasRolesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userhasroles.Table, userhasroles.Columns, nil)
	_spec.From = uhrq.sql
	if unique := uhrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uhrq.path != nil {
		_spec.Unique = true
	}
	if fields := uhrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if uhrq.withUsers != nil {
			_spec.Node.AddColumnOnce(userhasroles.FieldUserID)
		}
		if uhrq.withRoles != nil {
			_spec.Node.AddColumnOnce(userhasroles.FieldRoleID)
		}
	}
	if ps := uhrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uhrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uhrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uhrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uhrq *UserHasRolesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uhrq.driver.Dialect())
	t1 := builder.Table(userhasroles.Table)
	columns := uhrq.ctx.Fields
	if len(columns) == 0 {
		columns = userhasroles.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uhrq.sql != nil {
		selector = uhrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uhrq.ctx.Unique != nil && *uhrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uhrq.predicates {
		p(selector)
	}
	for _, p := range uhrq.order {
		p(selector)
	}
	if offset := uhrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uhrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserHasRolesGroupBy is the group-by builder for UserHasRoles entities.
type UserHasRolesGroupBy struct {
	selector
	build *UserHasRolesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uhrgb *UserHasRolesGroupBy) Aggregate(fns ...AggregateFunc) *UserHasRolesGroupBy {
	uhrgb.fns = append(uhrgb.fns, fns...)
	return uhrgb
}

// Scan applies the selector query and scans the result into the given value.
func (uhrgb *UserHasRolesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uhrgb.build.ctx, ent.OpQueryGroupBy)
	if err := uhrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserHasRolesQuery, *UserHasRolesGroupBy](ctx, uhrgb.build, uhrgb, uhrgb.build.inters, v)
}

func (uhrgb *UserHasRolesGroupBy) sqlScan(ctx context.Context, root *UserHasRolesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uhrgb.fns))
	for _, fn := range uhrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uhrgb.flds)+len(uhrgb.fns))
		for _, f := range *uhrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uhrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uhrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserHasRolesSelect is the builder for selecting fields of UserHasRoles entities.
type UserHasRolesSelect struct {
	*UserHasRolesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uhrs *UserHasRolesSelect) Aggregate(fns ...AggregateFunc) *UserHasRolesSelect {
	uhrs.fns = append(uhrs.fns, fns...)
	return uhrs
}

// Scan applies the selector query and scans the result into the given value.
func (uhrs *UserHasRolesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uhrs.ctx, ent.OpQuerySelect)
	if err := uhrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserHasRolesQuery, *UserHasRolesSelect](ctx, uhrs.UserHasRolesQuery, uhrs, uhrs.inters, v)
}

func (uhrs *UserHasRolesSelect) sqlScan(ctx context.Context, root *UserHasRolesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uhrs.fns))
	for _, fn := range uhrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uhrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uhrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
