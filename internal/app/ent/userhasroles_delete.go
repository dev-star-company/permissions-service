// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/userhasroles"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserHasRolesDelete is the builder for deleting a UserHasRoles entity.
type UserHasRolesDelete struct {
	config
	hooks    []Hook
	mutation *UserHasRolesMutation
}

// Where appends a list predicates to the UserHasRolesDelete builder.
func (uhrd *UserHasRolesDelete) Where(ps ...predicate.UserHasRoles) *UserHasRolesDelete {
	uhrd.mutation.Where(ps...)
	return uhrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uhrd *UserHasRolesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uhrd.sqlExec, uhrd.mutation, uhrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uhrd *UserHasRolesDelete) ExecX(ctx context.Context) int {
	n, err := uhrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uhrd *UserHasRolesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userhasroles.Table, sqlgraph.NewFieldSpec(userhasroles.FieldID, field.TypeInt))
	if ps := uhrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uhrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uhrd.mutation.done = true
	return affected, err
}

// UserHasRolesDeleteOne is the builder for deleting a single UserHasRoles entity.
type UserHasRolesDeleteOne struct {
	uhrd *UserHasRolesDelete
}

// Where appends a list predicates to the UserHasRolesDelete builder.
func (uhrdo *UserHasRolesDeleteOne) Where(ps ...predicate.UserHasRoles) *UserHasRolesDeleteOne {
	uhrdo.uhrd.mutation.Where(ps...)
	return uhrdo
}

// Exec executes the deletion query.
func (uhrdo *UserHasRolesDeleteOne) Exec(ctx context.Context) error {
	n, err := uhrdo.uhrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userhasroles.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uhrdo *UserHasRolesDeleteOne) ExecX(ctx context.Context) {
	if err := uhrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
