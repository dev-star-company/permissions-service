// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/ban"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BanUpdate is the builder for updating Ban entities.
type BanUpdate struct {
	config
	hooks    []Hook
	mutation *BanMutation
}

// Where appends a list predicates to the BanUpdate builder.
func (bu *BanUpdate) Where(ps ...predicate.Ban) *BanUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BanUpdate) SetUpdatedAt(t time.Time) *BanUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BanUpdate) SetDeletedAt(t time.Time) *BanUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BanUpdate) SetNillableDeletedAt(t *time.Time) *BanUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BanUpdate) ClearDeletedAt() *BanUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetUpdatedBy sets the "updated_by" field.
func (bu *BanUpdate) SetUpdatedBy(i int) *BanUpdate {
	bu.mutation.ResetUpdatedBy()
	bu.mutation.SetUpdatedBy(i)
	return bu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bu *BanUpdate) SetNillableUpdatedBy(i *int) *BanUpdate {
	if i != nil {
		bu.SetUpdatedBy(*i)
	}
	return bu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (bu *BanUpdate) AddUpdatedBy(i int) *BanUpdate {
	bu.mutation.AddUpdatedBy(i)
	return bu
}

// SetDeletedBy sets the "deleted_by" field.
func (bu *BanUpdate) SetDeletedBy(i int) *BanUpdate {
	bu.mutation.ResetDeletedBy()
	bu.mutation.SetDeletedBy(i)
	return bu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (bu *BanUpdate) SetNillableDeletedBy(i *int) *BanUpdate {
	if i != nil {
		bu.SetDeletedBy(*i)
	}
	return bu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (bu *BanUpdate) AddDeletedBy(i int) *BanUpdate {
	bu.mutation.AddDeletedBy(i)
	return bu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (bu *BanUpdate) ClearDeletedBy() *BanUpdate {
	bu.mutation.ClearDeletedBy()
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BanUpdate) SetUserID(i int) *BanUpdate {
	bu.mutation.SetUserID(i)
	return bu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bu *BanUpdate) SetNillableUserID(i *int) *BanUpdate {
	if i != nil {
		bu.SetUserID(*i)
	}
	return bu
}

// SetExpiresAt sets the "expires_at" field.
func (bu *BanUpdate) SetExpiresAt(t time.Time) *BanUpdate {
	bu.mutation.SetExpiresAt(t)
	return bu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (bu *BanUpdate) SetNillableExpiresAt(t *time.Time) *BanUpdate {
	if t != nil {
		bu.SetExpiresAt(*t)
	}
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BanUpdate) SetUser(u *User) *BanUpdate {
	return bu.SetUserID(u.ID)
}

// Mutation returns the BanMutation object of the builder.
func (bu *BanUpdate) Mutation() *BanMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BanUpdate) ClearUser() *BanUpdate {
	bu.mutation.ClearUser()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BanUpdate) Save(ctx context.Context) (int, error) {
	if err := bu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BanUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BanUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BanUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BanUpdate) defaults() error {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		if ban.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ban.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ban.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bu *BanUpdate) check() error {
	if v, ok := bu.mutation.UpdatedBy(); ok {
		if err := ban.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Ban.updated_by": %w`, err)}
		}
	}
	if bu.mutation.UserCleared() && len(bu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ban.user"`)
	}
	return nil
}

func (bu *BanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ban.Table, ban.Columns, sqlgraph.NewFieldSpec(ban.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(ban.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(ban.FieldDeletedAt, field.TypeTime, value)
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.ClearField(ban.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.UpdatedBy(); ok {
		_spec.SetField(ban.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(ban.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := bu.mutation.DeletedBy(); ok {
		_spec.SetField(ban.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(ban.FieldDeletedBy, field.TypeInt, value)
	}
	if bu.mutation.DeletedByCleared() {
		_spec.ClearField(ban.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := bu.mutation.ExpiresAt(); ok {
		_spec.SetField(ban.FieldExpiresAt, field.TypeTime, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ban.UserTable,
			Columns: []string{ban.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ban.UserTable,
			Columns: []string{ban.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ban.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BanUpdateOne is the builder for updating a single Ban entity.
type BanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BanMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BanUpdateOne) SetUpdatedAt(t time.Time) *BanUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BanUpdateOne) SetDeletedAt(t time.Time) *BanUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BanUpdateOne) SetNillableDeletedAt(t *time.Time) *BanUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BanUpdateOne) ClearDeletedAt() *BanUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetUpdatedBy sets the "updated_by" field.
func (buo *BanUpdateOne) SetUpdatedBy(i int) *BanUpdateOne {
	buo.mutation.ResetUpdatedBy()
	buo.mutation.SetUpdatedBy(i)
	return buo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (buo *BanUpdateOne) SetNillableUpdatedBy(i *int) *BanUpdateOne {
	if i != nil {
		buo.SetUpdatedBy(*i)
	}
	return buo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (buo *BanUpdateOne) AddUpdatedBy(i int) *BanUpdateOne {
	buo.mutation.AddUpdatedBy(i)
	return buo
}

// SetDeletedBy sets the "deleted_by" field.
func (buo *BanUpdateOne) SetDeletedBy(i int) *BanUpdateOne {
	buo.mutation.ResetDeletedBy()
	buo.mutation.SetDeletedBy(i)
	return buo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (buo *BanUpdateOne) SetNillableDeletedBy(i *int) *BanUpdateOne {
	if i != nil {
		buo.SetDeletedBy(*i)
	}
	return buo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (buo *BanUpdateOne) AddDeletedBy(i int) *BanUpdateOne {
	buo.mutation.AddDeletedBy(i)
	return buo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (buo *BanUpdateOne) ClearDeletedBy() *BanUpdateOne {
	buo.mutation.ClearDeletedBy()
	return buo
}

// SetUserID sets the "user_id" field.
func (buo *BanUpdateOne) SetUserID(i int) *BanUpdateOne {
	buo.mutation.SetUserID(i)
	return buo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buo *BanUpdateOne) SetNillableUserID(i *int) *BanUpdateOne {
	if i != nil {
		buo.SetUserID(*i)
	}
	return buo
}

// SetExpiresAt sets the "expires_at" field.
func (buo *BanUpdateOne) SetExpiresAt(t time.Time) *BanUpdateOne {
	buo.mutation.SetExpiresAt(t)
	return buo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (buo *BanUpdateOne) SetNillableExpiresAt(t *time.Time) *BanUpdateOne {
	if t != nil {
		buo.SetExpiresAt(*t)
	}
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BanUpdateOne) SetUser(u *User) *BanUpdateOne {
	return buo.SetUserID(u.ID)
}

// Mutation returns the BanMutation object of the builder.
func (buo *BanUpdateOne) Mutation() *BanMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BanUpdateOne) ClearUser() *BanUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// Where appends a list predicates to the BanUpdate builder.
func (buo *BanUpdateOne) Where(ps ...predicate.Ban) *BanUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BanUpdateOne) Select(field string, fields ...string) *BanUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Ban entity.
func (buo *BanUpdateOne) Save(ctx context.Context) (*Ban, error) {
	if err := buo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BanUpdateOne) SaveX(ctx context.Context) *Ban {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BanUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BanUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BanUpdateOne) defaults() error {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		if ban.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ban.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ban.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (buo *BanUpdateOne) check() error {
	if v, ok := buo.mutation.UpdatedBy(); ok {
		if err := ban.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Ban.updated_by": %w`, err)}
		}
	}
	if buo.mutation.UserCleared() && len(buo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ban.user"`)
	}
	return nil
}

func (buo *BanUpdateOne) sqlSave(ctx context.Context) (_node *Ban, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ban.Table, ban.Columns, sqlgraph.NewFieldSpec(ban.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ban.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ban.FieldID)
		for _, f := range fields {
			if !ban.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ban.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(ban.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(ban.FieldDeletedAt, field.TypeTime, value)
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.ClearField(ban.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.UpdatedBy(); ok {
		_spec.SetField(ban.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(ban.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := buo.mutation.DeletedBy(); ok {
		_spec.SetField(ban.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(ban.FieldDeletedBy, field.TypeInt, value)
	}
	if buo.mutation.DeletedByCleared() {
		_spec.ClearField(ban.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := buo.mutation.ExpiresAt(); ok {
		_spec.SetField(ban.FieldExpiresAt, field.TypeTime, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ban.UserTable,
			Columns: []string{ban.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ban.UserTable,
			Columns: []string{ban.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ban{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ban.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
