// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/rolehaspermissions"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// RoleHasPermissionsDelete is the builder for deleting a RoleHasPermissions entity.
type RoleHasPermissionsDelete struct {
	config
	hooks    []Hook
	mutation *RoleHasPermissionsMutation
}

// Where appends a list predicates to the RoleHasPermissionsDelete builder.
func (rhpd *RoleHasPermissionsDelete) Where(ps ...predicate.RoleHasPermissions) *RoleHasPermissionsDelete {
	rhpd.mutation.Where(ps...)
	return rhpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rhpd *RoleHasPermissionsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rhpd.sqlExec, rhpd.mutation, rhpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rhpd *RoleHasPermissionsDelete) ExecX(ctx context.Context) int {
	n, err := rhpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rhpd *RoleHasPermissionsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rolehaspermissions.Table, nil)
	if ps := rhpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rhpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rhpd.mutation.done = true
	return affected, err
}

// RoleHasPermissionsDeleteOne is the builder for deleting a single RoleHasPermissions entity.
type RoleHasPermissionsDeleteOne struct {
	rhpd *RoleHasPermissionsDelete
}

// Where appends a list predicates to the RoleHasPermissionsDelete builder.
func (rhpdo *RoleHasPermissionsDeleteOne) Where(ps ...predicate.RoleHasPermissions) *RoleHasPermissionsDeleteOne {
	rhpdo.rhpd.mutation.Where(ps...)
	return rhpdo
}

// Exec executes the deletion query.
func (rhpdo *RoleHasPermissionsDeleteOne) Exec(ctx context.Context) error {
	n, err := rhpdo.rhpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rolehaspermissions.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rhpdo *RoleHasPermissionsDeleteOne) ExecX(ctx context.Context) {
	if err := rhpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
