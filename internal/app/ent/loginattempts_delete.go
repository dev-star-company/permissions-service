// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"permission-service/internal/app/ent/loginattempts"
	"permission-service/internal/app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LoginAttemptsDelete is the builder for deleting a LoginAttempts entity.
type LoginAttemptsDelete struct {
	config
	hooks    []Hook
	mutation *LoginAttemptsMutation
}

// Where appends a list predicates to the LoginAttemptsDelete builder.
func (lad *LoginAttemptsDelete) Where(ps ...predicate.LoginAttempts) *LoginAttemptsDelete {
	lad.mutation.Where(ps...)
	return lad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lad *LoginAttemptsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lad.sqlExec, lad.mutation, lad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lad *LoginAttemptsDelete) ExecX(ctx context.Context) int {
	n, err := lad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lad *LoginAttemptsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(loginattempts.Table, sqlgraph.NewFieldSpec(loginattempts.FieldID, field.TypeInt))
	if ps := lad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lad.mutation.done = true
	return affected, err
}

// LoginAttemptsDeleteOne is the builder for deleting a single LoginAttempts entity.
type LoginAttemptsDeleteOne struct {
	lad *LoginAttemptsDelete
}

// Where appends a list predicates to the LoginAttemptsDelete builder.
func (lado *LoginAttemptsDeleteOne) Where(ps ...predicate.LoginAttempts) *LoginAttemptsDeleteOne {
	lado.lad.mutation.Where(ps...)
	return lado
}

// Exec executes the deletion query.
func (lado *LoginAttemptsDeleteOne) Exec(ctx context.Context) error {
	n, err := lado.lad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{loginattempts.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lado *LoginAttemptsDeleteOne) ExecX(ctx context.Context) {
	if err := lado.Exec(ctx); err != nil {
		panic(err)
	}
}
