// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/rolehaspermissions"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleHasPermissionsUpdate is the builder for updating RoleHasPermissions entities.
type RoleHasPermissionsUpdate struct {
	config
	hooks    []Hook
	mutation *RoleHasPermissionsMutation
}

// Where appends a list predicates to the RoleHasPermissionsUpdate builder.
func (rhpu *RoleHasPermissionsUpdate) Where(ps ...predicate.RoleHasPermissions) *RoleHasPermissionsUpdate {
	rhpu.mutation.Where(ps...)
	return rhpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rhpu *RoleHasPermissionsUpdate) SetUpdatedAt(t time.Time) *RoleHasPermissionsUpdate {
	rhpu.mutation.SetUpdatedAt(t)
	return rhpu
}

// SetDeletedAt sets the "deleted_at" field.
func (rhpu *RoleHasPermissionsUpdate) SetDeletedAt(t time.Time) *RoleHasPermissionsUpdate {
	rhpu.mutation.SetDeletedAt(t)
	return rhpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rhpu *RoleHasPermissionsUpdate) SetNillableDeletedAt(t *time.Time) *RoleHasPermissionsUpdate {
	if t != nil {
		rhpu.SetDeletedAt(*t)
	}
	return rhpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rhpu *RoleHasPermissionsUpdate) ClearDeletedAt() *RoleHasPermissionsUpdate {
	rhpu.mutation.ClearDeletedAt()
	return rhpu
}

// SetUpdatedBy sets the "updated_by" field.
func (rhpu *RoleHasPermissionsUpdate) SetUpdatedBy(i int) *RoleHasPermissionsUpdate {
	rhpu.mutation.ResetUpdatedBy()
	rhpu.mutation.SetUpdatedBy(i)
	return rhpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rhpu *RoleHasPermissionsUpdate) SetNillableUpdatedBy(i *int) *RoleHasPermissionsUpdate {
	if i != nil {
		rhpu.SetUpdatedBy(*i)
	}
	return rhpu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (rhpu *RoleHasPermissionsUpdate) AddUpdatedBy(i int) *RoleHasPermissionsUpdate {
	rhpu.mutation.AddUpdatedBy(i)
	return rhpu
}

// SetDeletedBy sets the "deleted_by" field.
func (rhpu *RoleHasPermissionsUpdate) SetDeletedBy(i int) *RoleHasPermissionsUpdate {
	rhpu.mutation.ResetDeletedBy()
	rhpu.mutation.SetDeletedBy(i)
	return rhpu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rhpu *RoleHasPermissionsUpdate) SetNillableDeletedBy(i *int) *RoleHasPermissionsUpdate {
	if i != nil {
		rhpu.SetDeletedBy(*i)
	}
	return rhpu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (rhpu *RoleHasPermissionsUpdate) AddDeletedBy(i int) *RoleHasPermissionsUpdate {
	rhpu.mutation.AddDeletedBy(i)
	return rhpu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (rhpu *RoleHasPermissionsUpdate) ClearDeletedBy() *RoleHasPermissionsUpdate {
	rhpu.mutation.ClearDeletedBy()
	return rhpu
}

// SetRoleID sets the "role_id" field.
func (rhpu *RoleHasPermissionsUpdate) SetRoleID(i int) *RoleHasPermissionsUpdate {
	rhpu.mutation.SetRoleID(i)
	return rhpu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rhpu *RoleHasPermissionsUpdate) SetNillableRoleID(i *int) *RoleHasPermissionsUpdate {
	if i != nil {
		rhpu.SetRoleID(*i)
	}
	return rhpu
}

// SetPermissionID sets the "permission_id" field.
func (rhpu *RoleHasPermissionsUpdate) SetPermissionID(i int) *RoleHasPermissionsUpdate {
	rhpu.mutation.SetPermissionID(i)
	return rhpu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rhpu *RoleHasPermissionsUpdate) SetNillablePermissionID(i *int) *RoleHasPermissionsUpdate {
	if i != nil {
		rhpu.SetPermissionID(*i)
	}
	return rhpu
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (rhpu *RoleHasPermissionsUpdate) SetRolesID(id int) *RoleHasPermissionsUpdate {
	rhpu.mutation.SetRolesID(id)
	return rhpu
}

// SetRoles sets the "roles" edge to the Role entity.
func (rhpu *RoleHasPermissionsUpdate) SetRoles(r *Role) *RoleHasPermissionsUpdate {
	return rhpu.SetRolesID(r.ID)
}

// SetPermissionsID sets the "permissions" edge to the Permission entity by ID.
func (rhpu *RoleHasPermissionsUpdate) SetPermissionsID(id int) *RoleHasPermissionsUpdate {
	rhpu.mutation.SetPermissionsID(id)
	return rhpu
}

// SetPermissions sets the "permissions" edge to the Permission entity.
func (rhpu *RoleHasPermissionsUpdate) SetPermissions(p *Permission) *RoleHasPermissionsUpdate {
	return rhpu.SetPermissionsID(p.ID)
}

// Mutation returns the RoleHasPermissionsMutation object of the builder.
func (rhpu *RoleHasPermissionsUpdate) Mutation() *RoleHasPermissionsMutation {
	return rhpu.mutation
}

// ClearRoles clears the "roles" edge to the Role entity.
func (rhpu *RoleHasPermissionsUpdate) ClearRoles() *RoleHasPermissionsUpdate {
	rhpu.mutation.ClearRoles()
	return rhpu
}

// ClearPermissions clears the "permissions" edge to the Permission entity.
func (rhpu *RoleHasPermissionsUpdate) ClearPermissions() *RoleHasPermissionsUpdate {
	rhpu.mutation.ClearPermissions()
	return rhpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rhpu *RoleHasPermissionsUpdate) Save(ctx context.Context) (int, error) {
	if err := rhpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, rhpu.sqlSave, rhpu.mutation, rhpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rhpu *RoleHasPermissionsUpdate) SaveX(ctx context.Context) int {
	affected, err := rhpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rhpu *RoleHasPermissionsUpdate) Exec(ctx context.Context) error {
	_, err := rhpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhpu *RoleHasPermissionsUpdate) ExecX(ctx context.Context) {
	if err := rhpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rhpu *RoleHasPermissionsUpdate) defaults() error {
	if _, ok := rhpu.mutation.UpdatedAt(); !ok {
		if rolehaspermissions.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rolehaspermissions.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rolehaspermissions.UpdateDefaultUpdatedAt()
		rhpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rhpu *RoleHasPermissionsUpdate) check() error {
	if v, ok := rhpu.mutation.UpdatedBy(); ok {
		if err := rolehaspermissions.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.updated_by": %w`, err)}
		}
	}
	if v, ok := rhpu.mutation.RoleID(); ok {
		if err := rolehaspermissions.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.role_id": %w`, err)}
		}
	}
	if v, ok := rhpu.mutation.PermissionID(); ok {
		if err := rolehaspermissions.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.permission_id": %w`, err)}
		}
	}
	if rhpu.mutation.RolesCleared() && len(rhpu.mutation.RolesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleHasPermissions.roles"`)
	}
	if rhpu.mutation.PermissionsCleared() && len(rhpu.mutation.PermissionsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleHasPermissions.permissions"`)
	}
	return nil
}

func (rhpu *RoleHasPermissionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rhpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolehaspermissions.Table, rolehaspermissions.Columns, sqlgraph.NewFieldSpec(rolehaspermissions.FieldID, field.TypeInt))
	if ps := rhpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rhpu.mutation.UpdatedAt(); ok {
		_spec.SetField(rolehaspermissions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rhpu.mutation.DeletedAt(); ok {
		_spec.SetField(rolehaspermissions.FieldDeletedAt, field.TypeTime, value)
	}
	if rhpu.mutation.DeletedAtCleared() {
		_spec.ClearField(rolehaspermissions.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rhpu.mutation.UpdatedBy(); ok {
		_spec.SetField(rolehaspermissions.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := rhpu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rolehaspermissions.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := rhpu.mutation.DeletedBy(); ok {
		_spec.SetField(rolehaspermissions.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := rhpu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(rolehaspermissions.FieldDeletedBy, field.TypeInt, value)
	}
	if rhpu.mutation.DeletedByCleared() {
		_spec.ClearField(rolehaspermissions.FieldDeletedBy, field.TypeInt)
	}
	if rhpu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.RolesTable,
			Columns: []string{rolehaspermissions.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rhpu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.RolesTable,
			Columns: []string{rolehaspermissions.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rhpu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.PermissionsTable,
			Columns: []string{rolehaspermissions.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rhpu.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.PermissionsTable,
			Columns: []string{rolehaspermissions.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rhpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolehaspermissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rhpu.mutation.done = true
	return n, nil
}

// RoleHasPermissionsUpdateOne is the builder for updating a single RoleHasPermissions entity.
type RoleHasPermissionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleHasPermissionsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (rhpuo *RoleHasPermissionsUpdateOne) SetUpdatedAt(t time.Time) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.SetUpdatedAt(t)
	return rhpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rhpuo *RoleHasPermissionsUpdateOne) SetDeletedAt(t time.Time) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.SetDeletedAt(t)
	return rhpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rhpuo *RoleHasPermissionsUpdateOne) SetNillableDeletedAt(t *time.Time) *RoleHasPermissionsUpdateOne {
	if t != nil {
		rhpuo.SetDeletedAt(*t)
	}
	return rhpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rhpuo *RoleHasPermissionsUpdateOne) ClearDeletedAt() *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.ClearDeletedAt()
	return rhpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (rhpuo *RoleHasPermissionsUpdateOne) SetUpdatedBy(i int) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.ResetUpdatedBy()
	rhpuo.mutation.SetUpdatedBy(i)
	return rhpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rhpuo *RoleHasPermissionsUpdateOne) SetNillableUpdatedBy(i *int) *RoleHasPermissionsUpdateOne {
	if i != nil {
		rhpuo.SetUpdatedBy(*i)
	}
	return rhpuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (rhpuo *RoleHasPermissionsUpdateOne) AddUpdatedBy(i int) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.AddUpdatedBy(i)
	return rhpuo
}

// SetDeletedBy sets the "deleted_by" field.
func (rhpuo *RoleHasPermissionsUpdateOne) SetDeletedBy(i int) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.ResetDeletedBy()
	rhpuo.mutation.SetDeletedBy(i)
	return rhpuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rhpuo *RoleHasPermissionsUpdateOne) SetNillableDeletedBy(i *int) *RoleHasPermissionsUpdateOne {
	if i != nil {
		rhpuo.SetDeletedBy(*i)
	}
	return rhpuo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (rhpuo *RoleHasPermissionsUpdateOne) AddDeletedBy(i int) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.AddDeletedBy(i)
	return rhpuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (rhpuo *RoleHasPermissionsUpdateOne) ClearDeletedBy() *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.ClearDeletedBy()
	return rhpuo
}

// SetRoleID sets the "role_id" field.
func (rhpuo *RoleHasPermissionsUpdateOne) SetRoleID(i int) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.SetRoleID(i)
	return rhpuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rhpuo *RoleHasPermissionsUpdateOne) SetNillableRoleID(i *int) *RoleHasPermissionsUpdateOne {
	if i != nil {
		rhpuo.SetRoleID(*i)
	}
	return rhpuo
}

// SetPermissionID sets the "permission_id" field.
func (rhpuo *RoleHasPermissionsUpdateOne) SetPermissionID(i int) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.SetPermissionID(i)
	return rhpuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rhpuo *RoleHasPermissionsUpdateOne) SetNillablePermissionID(i *int) *RoleHasPermissionsUpdateOne {
	if i != nil {
		rhpuo.SetPermissionID(*i)
	}
	return rhpuo
}

// SetRolesID sets the "roles" edge to the Role entity by ID.
func (rhpuo *RoleHasPermissionsUpdateOne) SetRolesID(id int) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.SetRolesID(id)
	return rhpuo
}

// SetRoles sets the "roles" edge to the Role entity.
func (rhpuo *RoleHasPermissionsUpdateOne) SetRoles(r *Role) *RoleHasPermissionsUpdateOne {
	return rhpuo.SetRolesID(r.ID)
}

// SetPermissionsID sets the "permissions" edge to the Permission entity by ID.
func (rhpuo *RoleHasPermissionsUpdateOne) SetPermissionsID(id int) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.SetPermissionsID(id)
	return rhpuo
}

// SetPermissions sets the "permissions" edge to the Permission entity.
func (rhpuo *RoleHasPermissionsUpdateOne) SetPermissions(p *Permission) *RoleHasPermissionsUpdateOne {
	return rhpuo.SetPermissionsID(p.ID)
}

// Mutation returns the RoleHasPermissionsMutation object of the builder.
func (rhpuo *RoleHasPermissionsUpdateOne) Mutation() *RoleHasPermissionsMutation {
	return rhpuo.mutation
}

// ClearRoles clears the "roles" edge to the Role entity.
func (rhpuo *RoleHasPermissionsUpdateOne) ClearRoles() *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.ClearRoles()
	return rhpuo
}

// ClearPermissions clears the "permissions" edge to the Permission entity.
func (rhpuo *RoleHasPermissionsUpdateOne) ClearPermissions() *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.ClearPermissions()
	return rhpuo
}

// Where appends a list predicates to the RoleHasPermissionsUpdate builder.
func (rhpuo *RoleHasPermissionsUpdateOne) Where(ps ...predicate.RoleHasPermissions) *RoleHasPermissionsUpdateOne {
	rhpuo.mutation.Where(ps...)
	return rhpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rhpuo *RoleHasPermissionsUpdateOne) Select(field string, fields ...string) *RoleHasPermissionsUpdateOne {
	rhpuo.fields = append([]string{field}, fields...)
	return rhpuo
}

// Save executes the query and returns the updated RoleHasPermissions entity.
func (rhpuo *RoleHasPermissionsUpdateOne) Save(ctx context.Context) (*RoleHasPermissions, error) {
	if err := rhpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rhpuo.sqlSave, rhpuo.mutation, rhpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rhpuo *RoleHasPermissionsUpdateOne) SaveX(ctx context.Context) *RoleHasPermissions {
	node, err := rhpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rhpuo *RoleHasPermissionsUpdateOne) Exec(ctx context.Context) error {
	_, err := rhpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rhpuo *RoleHasPermissionsUpdateOne) ExecX(ctx context.Context) {
	if err := rhpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rhpuo *RoleHasPermissionsUpdateOne) defaults() error {
	if _, ok := rhpuo.mutation.UpdatedAt(); !ok {
		if rolehaspermissions.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rolehaspermissions.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rolehaspermissions.UpdateDefaultUpdatedAt()
		rhpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rhpuo *RoleHasPermissionsUpdateOne) check() error {
	if v, ok := rhpuo.mutation.UpdatedBy(); ok {
		if err := rolehaspermissions.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.updated_by": %w`, err)}
		}
	}
	if v, ok := rhpuo.mutation.RoleID(); ok {
		if err := rolehaspermissions.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.role_id": %w`, err)}
		}
	}
	if v, ok := rhpuo.mutation.PermissionID(); ok {
		if err := rolehaspermissions.PermissionIDValidator(v); err != nil {
			return &ValidationError{Name: "permission_id", err: fmt.Errorf(`ent: validator failed for field "RoleHasPermissions.permission_id": %w`, err)}
		}
	}
	if rhpuo.mutation.RolesCleared() && len(rhpuo.mutation.RolesIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleHasPermissions.roles"`)
	}
	if rhpuo.mutation.PermissionsCleared() && len(rhpuo.mutation.PermissionsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleHasPermissions.permissions"`)
	}
	return nil
}

func (rhpuo *RoleHasPermissionsUpdateOne) sqlSave(ctx context.Context) (_node *RoleHasPermissions, err error) {
	if err := rhpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolehaspermissions.Table, rolehaspermissions.Columns, sqlgraph.NewFieldSpec(rolehaspermissions.FieldID, field.TypeInt))
	id, ok := rhpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoleHasPermissions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rhpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolehaspermissions.FieldID)
		for _, f := range fields {
			if !rolehaspermissions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolehaspermissions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rhpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rhpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(rolehaspermissions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rhpuo.mutation.DeletedAt(); ok {
		_spec.SetField(rolehaspermissions.FieldDeletedAt, field.TypeTime, value)
	}
	if rhpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(rolehaspermissions.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rhpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(rolehaspermissions.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := rhpuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(rolehaspermissions.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := rhpuo.mutation.DeletedBy(); ok {
		_spec.SetField(rolehaspermissions.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := rhpuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(rolehaspermissions.FieldDeletedBy, field.TypeInt, value)
	}
	if rhpuo.mutation.DeletedByCleared() {
		_spec.ClearField(rolehaspermissions.FieldDeletedBy, field.TypeInt)
	}
	if rhpuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.RolesTable,
			Columns: []string{rolehaspermissions.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rhpuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.RolesTable,
			Columns: []string{rolehaspermissions.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rhpuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.PermissionsTable,
			Columns: []string{rolehaspermissions.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rhpuo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolehaspermissions.PermissionsTable,
			Columns: []string{rolehaspermissions.PermissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoleHasPermissions{config: rhpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rhpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolehaspermissions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rhpuo.mutation.done = true
	return _node, nil
}
