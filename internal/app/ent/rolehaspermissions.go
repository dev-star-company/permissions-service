// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/rolehaspermissions"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RoleHasPermissions is the model entity for the RoleHasPermissions schema.
type RoleHasPermissions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *int `json:"deleted_by,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// PermissionID holds the value of the "permission_id" field.
	PermissionID int `json:"permission_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleHasPermissionsQuery when eager-loading is set.
	Edges        RoleHasPermissionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleHasPermissionsEdges holds the relations/edges for other nodes in the graph.
type RoleHasPermissionsEdges struct {
	// Roles holds the value of the roles edge.
	Roles *Role `json:"roles,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions *Permission `json:"permissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleHasPermissionsEdges) RolesOrErr() (*Role, error) {
	if e.Roles != nil {
		return e.Roles, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleHasPermissionsEdges) PermissionsOrErr() (*Permission, error) {
	if e.Permissions != nil {
		return e.Permissions, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: permission.Label}
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleHasPermissions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolehaspermissions.FieldID, rolehaspermissions.FieldCreatedBy, rolehaspermissions.FieldUpdatedBy, rolehaspermissions.FieldDeletedBy, rolehaspermissions.FieldRoleID, rolehaspermissions.FieldPermissionID:
			values[i] = new(sql.NullInt64)
		case rolehaspermissions.FieldCreatedAt, rolehaspermissions.FieldUpdatedAt, rolehaspermissions.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleHasPermissions fields.
func (rhp *RoleHasPermissions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolehaspermissions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rhp.ID = int(value.Int64)
		case rolehaspermissions.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rhp.CreatedAt = value.Time
			}
		case rolehaspermissions.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rhp.UpdatedAt = value.Time
			}
		case rolehaspermissions.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rhp.DeletedAt = new(time.Time)
				*rhp.DeletedAt = value.Time
			}
		case rolehaspermissions.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				rhp.CreatedBy = int(value.Int64)
			}
		case rolehaspermissions.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				rhp.UpdatedBy = int(value.Int64)
			}
		case rolehaspermissions.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				rhp.DeletedBy = new(int)
				*rhp.DeletedBy = int(value.Int64)
			}
		case rolehaspermissions.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				rhp.RoleID = int(value.Int64)
			}
		case rolehaspermissions.FieldPermissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permission_id", values[i])
			} else if value.Valid {
				rhp.PermissionID = int(value.Int64)
			}
		default:
			rhp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoleHasPermissions.
// This includes values selected through modifiers, order, etc.
func (rhp *RoleHasPermissions) Value(name string) (ent.Value, error) {
	return rhp.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the RoleHasPermissions entity.
func (rhp *RoleHasPermissions) QueryRoles() *RoleQuery {
	return NewRoleHasPermissionsClient(rhp.config).QueryRoles(rhp)
}

// QueryPermissions queries the "permissions" edge of the RoleHasPermissions entity.
func (rhp *RoleHasPermissions) QueryPermissions() *PermissionQuery {
	return NewRoleHasPermissionsClient(rhp.config).QueryPermissions(rhp)
}

// Update returns a builder for updating this RoleHasPermissions.
// Note that you need to call RoleHasPermissions.Unwrap() before calling this method if this RoleHasPermissions
// was returned from a transaction, and the transaction was committed or rolled back.
func (rhp *RoleHasPermissions) Update() *RoleHasPermissionsUpdateOne {
	return NewRoleHasPermissionsClient(rhp.config).UpdateOne(rhp)
}

// Unwrap unwraps the RoleHasPermissions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rhp *RoleHasPermissions) Unwrap() *RoleHasPermissions {
	_tx, ok := rhp.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleHasPermissions is not a transactional entity")
	}
	rhp.config.driver = _tx.drv
	return rhp
}

// String implements the fmt.Stringer.
func (rhp *RoleHasPermissions) String() string {
	var builder strings.Builder
	builder.WriteString("RoleHasPermissions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rhp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rhp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rhp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := rhp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", rhp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", rhp.UpdatedBy))
	builder.WriteString(", ")
	if v := rhp.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", rhp.RoleID))
	builder.WriteString(", ")
	builder.WriteString("permission_id=")
	builder.WriteString(fmt.Sprintf("%v", rhp.PermissionID))
	builder.WriteByte(')')
	return builder.String()
}

// RoleHasPermissionsSlice is a parsable slice of RoleHasPermissions.
type RoleHasPermissionsSlice []*RoleHasPermissions
