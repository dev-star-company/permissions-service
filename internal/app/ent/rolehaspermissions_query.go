// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"permission-service/internal/app/ent/permission"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/role"
	"permission-service/internal/app/ent/rolehaspermissions"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// RoleHasPermissionsQuery is the builder for querying RoleHasPermissions entities.
type RoleHasPermissionsQuery struct {
	config
	ctx             *QueryContext
	order           []rolehaspermissions.OrderOption
	inters          []Interceptor
	predicates      []predicate.RoleHasPermissions
	withRoles       *RoleQuery
	withPermissions *PermissionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoleHasPermissionsQuery builder.
func (rhpq *RoleHasPermissionsQuery) Where(ps ...predicate.RoleHasPermissions) *RoleHasPermissionsQuery {
	rhpq.predicates = append(rhpq.predicates, ps...)
	return rhpq
}

// Limit the number of records to be returned by this query.
func (rhpq *RoleHasPermissionsQuery) Limit(limit int) *RoleHasPermissionsQuery {
	rhpq.ctx.Limit = &limit
	return rhpq
}

// Offset to start from.
func (rhpq *RoleHasPermissionsQuery) Offset(offset int) *RoleHasPermissionsQuery {
	rhpq.ctx.Offset = &offset
	return rhpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rhpq *RoleHasPermissionsQuery) Unique(unique bool) *RoleHasPermissionsQuery {
	rhpq.ctx.Unique = &unique
	return rhpq
}

// Order specifies how the records should be ordered.
func (rhpq *RoleHasPermissionsQuery) Order(o ...rolehaspermissions.OrderOption) *RoleHasPermissionsQuery {
	rhpq.order = append(rhpq.order, o...)
	return rhpq
}

// QueryRoles chains the current query on the "roles" edge.
func (rhpq *RoleHasPermissionsQuery) QueryRoles() *RoleQuery {
	query := (&RoleClient{config: rhpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rhpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rhpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolehaspermissions.Table, rolehaspermissions.RolesColumn, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rolehaspermissions.RolesTable, rolehaspermissions.RolesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rhpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPermissions chains the current query on the "permissions" edge.
func (rhpq *RoleHasPermissionsQuery) QueryPermissions() *PermissionQuery {
	query := (&PermissionClient{config: rhpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rhpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rhpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolehaspermissions.Table, rolehaspermissions.PermissionsColumn, selector),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rolehaspermissions.PermissionsTable, rolehaspermissions.PermissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rhpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RoleHasPermissions entity from the query.
// Returns a *NotFoundError when no RoleHasPermissions was found.
func (rhpq *RoleHasPermissionsQuery) First(ctx context.Context) (*RoleHasPermissions, error) {
	nodes, err := rhpq.Limit(1).All(setContextOp(ctx, rhpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rolehaspermissions.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rhpq *RoleHasPermissionsQuery) FirstX(ctx context.Context) *RoleHasPermissions {
	node, err := rhpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single RoleHasPermissions entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RoleHasPermissions entity is found.
// Returns a *NotFoundError when no RoleHasPermissions entities are found.
func (rhpq *RoleHasPermissionsQuery) Only(ctx context.Context) (*RoleHasPermissions, error) {
	nodes, err := rhpq.Limit(2).All(setContextOp(ctx, rhpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rolehaspermissions.Label}
	default:
		return nil, &NotSingularError{rolehaspermissions.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rhpq *RoleHasPermissionsQuery) OnlyX(ctx context.Context) *RoleHasPermissions {
	node, err := rhpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of RoleHasPermissionsSlice.
func (rhpq *RoleHasPermissionsQuery) All(ctx context.Context) ([]*RoleHasPermissions, error) {
	ctx = setContextOp(ctx, rhpq.ctx, ent.OpQueryAll)
	if err := rhpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RoleHasPermissions, *RoleHasPermissionsQuery]()
	return withInterceptors[[]*RoleHasPermissions](ctx, rhpq, qr, rhpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rhpq *RoleHasPermissionsQuery) AllX(ctx context.Context) []*RoleHasPermissions {
	nodes, err := rhpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (rhpq *RoleHasPermissionsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rhpq.ctx, ent.OpQueryCount)
	if err := rhpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rhpq, querierCount[*RoleHasPermissionsQuery](), rhpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rhpq *RoleHasPermissionsQuery) CountX(ctx context.Context) int {
	count, err := rhpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rhpq *RoleHasPermissionsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rhpq.ctx, ent.OpQueryExist)
	switch _, err := rhpq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rhpq *RoleHasPermissionsQuery) ExistX(ctx context.Context) bool {
	exist, err := rhpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoleHasPermissionsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rhpq *RoleHasPermissionsQuery) Clone() *RoleHasPermissionsQuery {
	if rhpq == nil {
		return nil
	}
	return &RoleHasPermissionsQuery{
		config:          rhpq.config,
		ctx:             rhpq.ctx.Clone(),
		order:           append([]rolehaspermissions.OrderOption{}, rhpq.order...),
		inters:          append([]Interceptor{}, rhpq.inters...),
		predicates:      append([]predicate.RoleHasPermissions{}, rhpq.predicates...),
		withRoles:       rhpq.withRoles.Clone(),
		withPermissions: rhpq.withPermissions.Clone(),
		// clone intermediate query.
		sql:  rhpq.sql.Clone(),
		path: rhpq.path,
	}
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (rhpq *RoleHasPermissionsQuery) WithRoles(opts ...func(*RoleQuery)) *RoleHasPermissionsQuery {
	query := (&RoleClient{config: rhpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rhpq.withRoles = query
	return rhpq
}

// WithPermissions tells the query-builder to eager-load the nodes that are connected to
// the "permissions" edge. The optional arguments are used to configure the query builder of the edge.
func (rhpq *RoleHasPermissionsQuery) WithPermissions(opts ...func(*PermissionQuery)) *RoleHasPermissionsQuery {
	query := (&PermissionClient{config: rhpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rhpq.withPermissions = query
	return rhpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoleHasPermissions.Query().
//		GroupBy(rolehaspermissions.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rhpq *RoleHasPermissionsQuery) GroupBy(field string, fields ...string) *RoleHasPermissionsGroupBy {
	rhpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RoleHasPermissionsGroupBy{build: rhpq}
	grbuild.flds = &rhpq.ctx.Fields
	grbuild.label = rolehaspermissions.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.RoleHasPermissions.Query().
//		Select(rolehaspermissions.FieldCreatedAt).
//		Scan(ctx, &v)
func (rhpq *RoleHasPermissionsQuery) Select(fields ...string) *RoleHasPermissionsSelect {
	rhpq.ctx.Fields = append(rhpq.ctx.Fields, fields...)
	sbuild := &RoleHasPermissionsSelect{RoleHasPermissionsQuery: rhpq}
	sbuild.label = rolehaspermissions.Label
	sbuild.flds, sbuild.scan = &rhpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RoleHasPermissionsSelect configured with the given aggregations.
func (rhpq *RoleHasPermissionsQuery) Aggregate(fns ...AggregateFunc) *RoleHasPermissionsSelect {
	return rhpq.Select().Aggregate(fns...)
}

func (rhpq *RoleHasPermissionsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rhpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rhpq); err != nil {
				return err
			}
		}
	}
	for _, f := range rhpq.ctx.Fields {
		if !rolehaspermissions.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rhpq.path != nil {
		prev, err := rhpq.path(ctx)
		if err != nil {
			return err
		}
		rhpq.sql = prev
	}
	return nil
}

func (rhpq *RoleHasPermissionsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RoleHasPermissions, error) {
	var (
		nodes       = []*RoleHasPermissions{}
		_spec       = rhpq.querySpec()
		loadedTypes = [2]bool{
			rhpq.withRoles != nil,
			rhpq.withPermissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RoleHasPermissions).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RoleHasPermissions{config: rhpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rhpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rhpq.withRoles; query != nil {
		if err := rhpq.loadRoles(ctx, query, nodes, nil,
			func(n *RoleHasPermissions, e *Role) { n.Edges.Roles = e }); err != nil {
			return nil, err
		}
	}
	if query := rhpq.withPermissions; query != nil {
		if err := rhpq.loadPermissions(ctx, query, nodes, nil,
			func(n *RoleHasPermissions, e *Permission) { n.Edges.Permissions = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rhpq *RoleHasPermissionsQuery) loadRoles(ctx context.Context, query *RoleQuery, nodes []*RoleHasPermissions, init func(*RoleHasPermissions), assign func(*RoleHasPermissions, *Role)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RoleHasPermissions)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rhpq *RoleHasPermissionsQuery) loadPermissions(ctx context.Context, query *PermissionQuery, nodes []*RoleHasPermissions, init func(*RoleHasPermissions), assign func(*RoleHasPermissions, *Permission)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*RoleHasPermissions)
	for i := range nodes {
		fk := nodes[i].PermissionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(permission.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "permission_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rhpq *RoleHasPermissionsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rhpq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, rhpq.driver, _spec)
}

func (rhpq *RoleHasPermissionsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(rolehaspermissions.Table, rolehaspermissions.Columns, nil)
	_spec.From = rhpq.sql
	if unique := rhpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rhpq.path != nil {
		_spec.Unique = true
	}
	if fields := rhpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if rhpq.withRoles != nil {
			_spec.Node.AddColumnOnce(rolehaspermissions.FieldRoleID)
		}
		if rhpq.withPermissions != nil {
			_spec.Node.AddColumnOnce(rolehaspermissions.FieldPermissionID)
		}
	}
	if ps := rhpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rhpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rhpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rhpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rhpq *RoleHasPermissionsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rhpq.driver.Dialect())
	t1 := builder.Table(rolehaspermissions.Table)
	columns := rhpq.ctx.Fields
	if len(columns) == 0 {
		columns = rolehaspermissions.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rhpq.sql != nil {
		selector = rhpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rhpq.ctx.Unique != nil && *rhpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rhpq.predicates {
		p(selector)
	}
	for _, p := range rhpq.order {
		p(selector)
	}
	if offset := rhpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rhpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoleHasPermissionsGroupBy is the group-by builder for RoleHasPermissions entities.
type RoleHasPermissionsGroupBy struct {
	selector
	build *RoleHasPermissionsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rhpgb *RoleHasPermissionsGroupBy) Aggregate(fns ...AggregateFunc) *RoleHasPermissionsGroupBy {
	rhpgb.fns = append(rhpgb.fns, fns...)
	return rhpgb
}

// Scan applies the selector query and scans the result into the given value.
func (rhpgb *RoleHasPermissionsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rhpgb.build.ctx, ent.OpQueryGroupBy)
	if err := rhpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleHasPermissionsQuery, *RoleHasPermissionsGroupBy](ctx, rhpgb.build, rhpgb, rhpgb.build.inters, v)
}

func (rhpgb *RoleHasPermissionsGroupBy) sqlScan(ctx context.Context, root *RoleHasPermissionsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rhpgb.fns))
	for _, fn := range rhpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rhpgb.flds)+len(rhpgb.fns))
		for _, f := range *rhpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rhpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rhpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RoleHasPermissionsSelect is the builder for selecting fields of RoleHasPermissions entities.
type RoleHasPermissionsSelect struct {
	*RoleHasPermissionsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rhps *RoleHasPermissionsSelect) Aggregate(fns ...AggregateFunc) *RoleHasPermissionsSelect {
	rhps.fns = append(rhps.fns, fns...)
	return rhps
}

// Scan applies the selector query and scans the result into the given value.
func (rhps *RoleHasPermissionsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rhps.ctx, ent.OpQuerySelect)
	if err := rhps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleHasPermissionsQuery, *RoleHasPermissionsSelect](ctx, rhps.RoleHasPermissionsQuery, rhps, rhps.inters, v)
}

func (rhps *RoleHasPermissionsSelect) sqlScan(ctx context.Context, root *RoleHasPermissionsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rhps.fns))
	for _, fn := range rhps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rhps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rhps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
