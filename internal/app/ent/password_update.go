// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"permission-service/internal/app/ent/password"
	"permission-service/internal/app/ent/predicate"
	"permission-service/internal/app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PasswordUpdate is the builder for updating Password entities.
type PasswordUpdate struct {
	config
	hooks    []Hook
	mutation *PasswordMutation
}

// Where appends a list predicates to the PasswordUpdate builder.
func (pu *PasswordUpdate) Where(ps ...predicate.Password) *PasswordUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PasswordUpdate) SetUpdatedAt(t time.Time) *PasswordUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PasswordUpdate) SetDeletedAt(t time.Time) *PasswordUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PasswordUpdate) SetNillableDeletedAt(t *time.Time) *PasswordUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PasswordUpdate) ClearDeletedAt() *PasswordUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PasswordUpdate) SetUpdatedBy(i int) *PasswordUpdate {
	pu.mutation.ResetUpdatedBy()
	pu.mutation.SetUpdatedBy(i)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PasswordUpdate) SetNillableUpdatedBy(i *int) *PasswordUpdate {
	if i != nil {
		pu.SetUpdatedBy(*i)
	}
	return pu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pu *PasswordUpdate) AddUpdatedBy(i int) *PasswordUpdate {
	pu.mutation.AddUpdatedBy(i)
	return pu
}

// SetDeletedBy sets the "deleted_by" field.
func (pu *PasswordUpdate) SetDeletedBy(i int) *PasswordUpdate {
	pu.mutation.ResetDeletedBy()
	pu.mutation.SetDeletedBy(i)
	return pu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pu *PasswordUpdate) SetNillableDeletedBy(i *int) *PasswordUpdate {
	if i != nil {
		pu.SetDeletedBy(*i)
	}
	return pu
}

// AddDeletedBy adds i to the "deleted_by" field.
func (pu *PasswordUpdate) AddDeletedBy(i int) *PasswordUpdate {
	pu.mutation.AddDeletedBy(i)
	return pu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pu *PasswordUpdate) ClearDeletedBy() *PasswordUpdate {
	pu.mutation.ClearDeletedBy()
	return pu
}

// SetPassword sets the "password" field.
func (pu *PasswordUpdate) SetPassword(s string) *PasswordUpdate {
	pu.mutation.SetPassword(s)
	return pu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (pu *PasswordUpdate) SetNillablePassword(s *string) *PasswordUpdate {
	if s != nil {
		pu.SetPassword(*s)
	}
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PasswordUpdate) SetUserID(i int) *PasswordUpdate {
	pu.mutation.SetUserID(i)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PasswordUpdate) SetNillableUserID(i *int) *PasswordUpdate {
	if i != nil {
		pu.SetUserID(*i)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PasswordUpdate) SetUser(u *User) *PasswordUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the PasswordMutation object of the builder.
func (pu *PasswordUpdate) Mutation() *PasswordMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PasswordUpdate) ClearUser() *PasswordUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PasswordUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PasswordUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PasswordUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PasswordUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PasswordUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if password.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized password.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := password.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PasswordUpdate) check() error {
	if v, ok := pu.mutation.UpdatedBy(); ok {
		if err := password.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Password.updated_by": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Password(); ok {
		if err := password.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Password.password": %w`, err)}
		}
	}
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Password.user"`)
	}
	return nil
}

func (pu *PasswordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(password.Table, password.Columns, sqlgraph.NewFieldSpec(password.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(password.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(password.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(password.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(password.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(password.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.DeletedBy(); ok {
		_spec.SetField(password.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(password.FieldDeletedBy, field.TypeInt, value)
	}
	if pu.mutation.DeletedByCleared() {
		_spec.ClearField(password.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := pu.mutation.Password(); ok {
		_spec.SetField(password.FieldPassword, field.TypeString, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   password.UserTable,
			Columns: []string{password.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   password.UserTable,
			Columns: []string{password.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{password.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PasswordUpdateOne is the builder for updating a single Password entity.
type PasswordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PasswordMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PasswordUpdateOne) SetUpdatedAt(t time.Time) *PasswordUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PasswordUpdateOne) SetDeletedAt(t time.Time) *PasswordUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PasswordUpdateOne) SetNillableDeletedAt(t *time.Time) *PasswordUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PasswordUpdateOne) ClearDeletedAt() *PasswordUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PasswordUpdateOne) SetUpdatedBy(i int) *PasswordUpdateOne {
	puo.mutation.ResetUpdatedBy()
	puo.mutation.SetUpdatedBy(i)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PasswordUpdateOne) SetNillableUpdatedBy(i *int) *PasswordUpdateOne {
	if i != nil {
		puo.SetUpdatedBy(*i)
	}
	return puo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (puo *PasswordUpdateOne) AddUpdatedBy(i int) *PasswordUpdateOne {
	puo.mutation.AddUpdatedBy(i)
	return puo
}

// SetDeletedBy sets the "deleted_by" field.
func (puo *PasswordUpdateOne) SetDeletedBy(i int) *PasswordUpdateOne {
	puo.mutation.ResetDeletedBy()
	puo.mutation.SetDeletedBy(i)
	return puo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (puo *PasswordUpdateOne) SetNillableDeletedBy(i *int) *PasswordUpdateOne {
	if i != nil {
		puo.SetDeletedBy(*i)
	}
	return puo
}

// AddDeletedBy adds i to the "deleted_by" field.
func (puo *PasswordUpdateOne) AddDeletedBy(i int) *PasswordUpdateOne {
	puo.mutation.AddDeletedBy(i)
	return puo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (puo *PasswordUpdateOne) ClearDeletedBy() *PasswordUpdateOne {
	puo.mutation.ClearDeletedBy()
	return puo
}

// SetPassword sets the "password" field.
func (puo *PasswordUpdateOne) SetPassword(s string) *PasswordUpdateOne {
	puo.mutation.SetPassword(s)
	return puo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (puo *PasswordUpdateOne) SetNillablePassword(s *string) *PasswordUpdateOne {
	if s != nil {
		puo.SetPassword(*s)
	}
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *PasswordUpdateOne) SetUserID(i int) *PasswordUpdateOne {
	puo.mutation.SetUserID(i)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PasswordUpdateOne) SetNillableUserID(i *int) *PasswordUpdateOne {
	if i != nil {
		puo.SetUserID(*i)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PasswordUpdateOne) SetUser(u *User) *PasswordUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the PasswordMutation object of the builder.
func (puo *PasswordUpdateOne) Mutation() *PasswordMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PasswordUpdateOne) ClearUser() *PasswordUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the PasswordUpdate builder.
func (puo *PasswordUpdateOne) Where(ps ...predicate.Password) *PasswordUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PasswordUpdateOne) Select(field string, fields ...string) *PasswordUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Password entity.
func (puo *PasswordUpdateOne) Save(ctx context.Context) (*Password, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PasswordUpdateOne) SaveX(ctx context.Context) *Password {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PasswordUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PasswordUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PasswordUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if password.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized password.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := password.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PasswordUpdateOne) check() error {
	if v, ok := puo.mutation.UpdatedBy(); ok {
		if err := password.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Password.updated_by": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Password(); ok {
		if err := password.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Password.password": %w`, err)}
		}
	}
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Password.user"`)
	}
	return nil
}

func (puo *PasswordUpdateOne) sqlSave(ctx context.Context) (_node *Password, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(password.Table, password.Columns, sqlgraph.NewFieldSpec(password.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Password.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, password.FieldID)
		for _, f := range fields {
			if !password.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != password.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(password.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(password.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(password.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(password.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(password.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.DeletedBy(); ok {
		_spec.SetField(password.FieldDeletedBy, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(password.FieldDeletedBy, field.TypeInt, value)
	}
	if puo.mutation.DeletedByCleared() {
		_spec.ClearField(password.FieldDeletedBy, field.TypeInt)
	}
	if value, ok := puo.mutation.Password(); ok {
		_spec.SetField(password.FieldPassword, field.TypeString, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   password.UserTable,
			Columns: []string{password.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   password.UserTable,
			Columns: []string{password.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Password{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{password.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
